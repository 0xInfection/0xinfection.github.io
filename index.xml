<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0xInfection&#39;s Blog</title>
    
    
    
    <link>https://0xinfection.github.io/</link>
    <description>Recent content on 0xInfection&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 0xInfection</copyright>
    <lastBuildDate>Sun, 31 Oct 2021 00:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://0xinfection.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analyzing two FreeSWITCH vulnerabilities -- CVE-2021-41157 &amp; CVE-2021-37624</title>
      <link>https://0xinfection.github.io/posts/analyzing-freeswitch-vulns/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/analyzing-freeswitch-vulns/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/analyzing-freeswitch-vulns/cover.gif&#34;/&gt;
          
        
        
        
          This post is about two vulnerabilities that I researched on a year back in the FreeSWITCH VoIP server that were fixed and disclosed publicly a few weeks ago. Both of the vulnerabilities were issues that affected the SIP functionality in all versions below v1.10.7 and were categorized under CWE-287.
Background # The story dates to a year ago, back when I was still learning about RTC (real-time communications) security and working under Sandro &amp;ndash; where we used to do a lot of research on real-time communication infra.
          
        
        </description>
    </item>
    
    <item>
      <title>Offensive WMI - Active Directory Enumeration (Part 5)</title>
      <link>https://0xinfection.github.io/posts/wmi-ad-enum/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/wmi-ad-enum/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/wmi-ad-enum/cover.png&#34;/&gt;
          
        
        
        
          This blog is the fifth installation of the &amp;ldquo;Offensive WMI&amp;rdquo; series that I&amp;rsquo;ve been writing on, and this post will cover Active Directory enumeration.
Active Directory (AD) is Microsoft&amp;rsquo;s implementation of a directory and IAM service for Windows domain networks &amp;ndash; which enables admins to manage permissions and access to resources. Anything used for managing multiple resources is handy for administrators, however, the same is also useful for evil-doers in gathering information and lateral movement.
          
        
        </description>
    </item>
    
    <item>
      <title>Offensive WMI - Reconnaissance &amp; Enumeration (Part 4)</title>
      <link>https://0xinfection.github.io/posts/wmi-recon-enum/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/wmi-recon-enum/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/wmi-recon-enum/cover.png&#34;/&gt;
          
        
        
        
          This is the fourth part of the &amp;ldquo;Offensive WMI&amp;rdquo; series which will focus a bit more on information gathering and enumeration. WMI provides a plethora of classes from which we can enumerate a lot of stuff. So let&amp;rsquo;s dive in without wasting any more time.
Gathering basic information # In our previous blogs, we have already seen a lot of classes that provide us with valuable information about a system, e.
          
        
        </description>
    </item>
    
    <item>
      <title>Offensive WMI - Interacting with Windows Registry (Part 3)</title>
      <link>https://0xinfection.github.io/posts/wmi-registry-part-3/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/wmi-registry-part-3/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/wmi-registry-part-3/cover.png&#34;/&gt;
          
        
        
        
          This is the third instalment of the &amp;ldquo;Offensive WMI&amp;rdquo; series (the 2nd is here), and this blog will focus on interacting with the Windows Registry. A useful thing to know before we start, MITRE ATT&amp;amp;CK classifies querying of registry values under T1012 and its modification under T1112.
Let&amp;rsquo;s dive in.
What is Windows Registry? # In simple terms, the registry is a database that stores configuration settings and options of the operating system: the kernel, device drivers, services, SAM, user interface and third party applications all make use of the registry.
          
        
        </description>
    </item>
    
    <item>
      <title>Offensive WMI - Exploring Namespaces, Classes &amp; Methods (Part 2)</title>
      <link>https://0xinfection.github.io/posts/wmi-classes-methods-part-2/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/wmi-classes-methods-part-2/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/wmi-classes-methods-part-2/cover.png&#34;/&gt;
          
        
        
        
          This blog post is the second part of the &amp;ldquo;Offensive WMI&amp;rdquo; series (the first is here), and this article will be focusing on the 3 major components in WMI that we&amp;rsquo;d be majorly dealing with. Throughout the article, we&amp;rsquo;ll be using both WMI and CIM cmdlets interchangeably so that we&amp;rsquo;re well-versed with both cmdlet types.
Namespaces # Let&amp;rsquo;s recall what namespaces are in simple terms:
A namespace organizes information similar to folders in a filesystem.
          
        
        </description>
    </item>
    
    <item>
      <title>Offensive WMI - The Basics (Part 1)</title>
      <link>https://0xinfection.github.io/posts/wmi-basics-part-1/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/wmi-basics-part-1/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/wmi-basics-part-1/cover.png&#34;/&gt;
          
        
        
        
          This blog post is the first of a many part series on WMI and is intended for fairly new audiences. A basic understanding of Powershell will definitely help the reader while going through the blog, however, it is not a requirement. That&amp;rsquo;s it, let us jump into the real stuff.
Introduction # Why WMI? # WMI is a set of specifications from Microsoft that was designed for fast and efficient administration when it comes to Windows systems.
          
        
        </description>
    </item>
    
    <item>
      <title>Pwning a Backend with a Backdoor</title>
      <link>https://0xinfection.github.io/posts/pwning-backend-backdoor/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/pwning-backend-backdoor/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/pwning-backend-backdoor/cover.png&#34;/&gt;
          
        
        
        
          Development is a important task. But mindful secure development is much more important. In this quick blog post, I detail an unusual way in which I was able to escalate access to several production instances behind a properly secured network.
How it started. # It all started with me casually checking some traffic data for a tool I authored on GitHub. GitHub allows you to view a few stats for the past 14 days, viz.
          
        
        </description>
    </item>
    
    <item>
      <title>Utilizing CI/CDs to the Fullest for Fun and Profit</title>
      <link>https://0xinfection.github.io/posts/utilizing-ci-cds/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/utilizing-ci-cds/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/utilizing-ci-cds/cover.png&#34;/&gt;
          
        
        
        
          Hey folks,
We all have heard of CI/CDs right? I was exploring GitHub Actions and what I found was the fact that it was an extremely underrated resource which is not quite widely used for general purposes by people. In this blog post, I aim to detail how people can really benefit from CI/CDs with GitHub Actions in focus, and how one can fully exploit the resource to get the most out of it.
          
        
        </description>
    </item>
    
    <item>
      <title>Fingerprinting WAF Rules with Timing Based Side Channel Attacks</title>
      <link>https://0xinfection.github.io/posts/fingerprinting-wafs-side-channel/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0530</pubDate>
      
      <guid>https://0xinfection.github.io/posts/fingerprinting-wafs-side-channel/</guid>
      <description>
        
          &lt;img src=&#34;https://0xinfection.github.io/posts/fingerprinting-wafs-side-channel/cover.png&#34;/&gt;
          
        
        
        
          Hi folks,
Today in this post I am going to be detailing about my recent experiments with web application firewalls (WAFs) focusing on a specific type of side channel attacks, namely, timing. In my opinion, this field hasn’t been studied actively and the results can be more lethal than you’re expecting. This post is already long, so lets get started rightaway. :)
Side Channel Attacks? # Wikipedia defines side-channel attacks as:
          
        
        </description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://0xinfection.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://0xinfection.github.io/about/</guid>
      <description>
        
          
          
          
        
        
        
          Hi, I&amp;rsquo;m Pinaki a.k.a. 0xInfection! :)
Twitter: twitter.com/0xinfection GitHub: github.com/0xinfection Keybase: keybase.io/0xinfection LinkedIn: linkedin.com/in/0xinfection/ Contact Email: 0xinfection [at] gmail.com PGP Key: Here 
          
        
        </description>
    </item>
    
  </channel>
</rss>